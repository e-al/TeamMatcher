-- MySQL dump 10.13  Distrib 5.7.17, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: 
-- ------------------------------------------------------
-- Server version	5.5.5-10.1.22-MariaDB-1~jessie

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `teammatcher$TeamMatcher`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `teammatcher$TeamMatcher` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `teammatcher$TeamMatcher`;

--
-- Table structure for table `AvailableTime`
--

DROP TABLE IF EXISTS `AvailableTime`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `AvailableTime` (
  `Available_Time_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` int(11) DEFAULT NULL,
  `Student_Id` int(11) DEFAULT NULL,
  `Dow` int(11) DEFAULT NULL,
  `Start` int(11) DEFAULT NULL,
  `Until` int(11) DEFAULT NULL,
  PRIMARY KEY (`Available_Time_Id`),
  KEY `Project_Id` (`Project_Id`),
  KEY `Student_Id` (`Student_Id`),
  CONSTRAINT `AvailableTime_ibfk_1` FOREIGN KEY (`Project_Id`) REFERENCES `Project` (`Project_Id`) ON DELETE CASCADE,
  CONSTRAINT `AvailableTime_ibfk_2` FOREIGN KEY (`Student_Id`) REFERENCES `Student` (`Student_Id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `AvailableTime`
--

LOCK TABLES `AvailableTime` WRITE;
/*!40000 ALTER TABLE `AvailableTime` DISABLE KEYS */;
/*!40000 ALTER TABLE `AvailableTime` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Class`
--

DROP TABLE IF EXISTS `Class`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Class` (
  `Class_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Class_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Class`
--

LOCK TABLES `Class` WRITE;
/*!40000 ALTER TABLE `Class` DISABLE KEYS */;
/*!40000 ALTER TABLE `Class` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `LastReadMessage`
--

DROP TABLE IF EXISTS `LastReadMessage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `LastReadMessage` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Student_Id` int(11) DEFAULT NULL,
  `Room_Id` int(11) DEFAULT NULL,
  `Last_Msg_Id` int(11) DEFAULT NULL,
  `Last_Read_Msg_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `Student_Id` (`Student_Id`,`Room_Id`),
  KEY `Room_Id` (`Room_Id`),
  KEY `Last_Msg_Id` (`Last_Msg_Id`),
  KEY `Last_Read_Msg_Id` (`Last_Read_Msg_Id`),
  CONSTRAINT `LastReadMessage_ibfk_1` FOREIGN KEY (`Room_Id`) REFERENCES `Room` (`Room_Id`) ON DELETE CASCADE,
  CONSTRAINT `LastReadMessage_ibfk_2` FOREIGN KEY (`Last_Msg_Id`) REFERENCES `Message` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `LastReadMessage_ibfk_3` FOREIGN KEY (`Last_Read_Msg_Id`) REFERENCES `Message` (`Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=123 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `LastReadMessage`
--

LOCK TABLES `LastReadMessage` WRITE;
/*!40000 ALTER TABLE `LastReadMessage` DISABLE KEYS */;
INSERT INTO `LastReadMessage` VALUES (1,1,2,2,2),(2,2,2,5,5),(3,1,3,4,4),(4,4,3,4,4),(5,12,4,35,35),(7,11,4,35,35),(10,12,5,9,9),(12,8,5,9,9),(13,15,6,18,11),(15,16,6,18,12),(18,17,6,18,13),(22,18,6,18,14),(27,19,6,18,15),(33,20,6,18,16),(40,21,6,18,17),(48,22,6,18,18),(57,12,7,20,20),(59,15,7,20,20),(60,4,8,24,21),(62,5,8,24,22),(65,6,8,24,23),(69,7,8,24,24),(74,12,9,33,33),(76,13,9,33,26),(79,14,9,33,27),(83,31,10,32,28),(85,32,10,32,29),(88,33,10,32,30),(92,34,10,32,31),(97,12,10,32,32),(108,74,11,40,36),(110,75,11,40,37),(113,76,11,40,38),(117,77,11,40,39),(122,12,11,40,40);
/*!40000 ALTER TABLE `LastReadMessage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Message`
--

DROP TABLE IF EXISTS `Message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Message` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Recv_Room_Id` int(11) DEFAULT NULL,
  `Sender_Id` int(11) DEFAULT NULL,
  `Text` varchar(1000) DEFAULT NULL,
  `Ts` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`),
  KEY `Recv_Room_Id` (`Recv_Room_Id`),
  KEY `Sender_Id` (`Sender_Id`),
  CONSTRAINT `Message_ibfk_1` FOREIGN KEY (`Recv_Room_Id`) REFERENCES `Room` (`Room_Id`) ON DELETE CASCADE,
  CONSTRAINT `Message_ibfk_2` FOREIGN KEY (`Sender_Id`) REFERENCES `Student` (`Student_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Message`
--

LOCK TABLES `Message` WRITE;
/*!40000 ALTER TABLE `Message` DISABLE KEYS */;
INSERT INTO `Message` VALUES (1,2,1,'joined room','2017-04-26 08:46:03'),(2,2,2,'joined room','2017-04-26 08:46:03'),(3,3,1,'joined room','2017-04-26 08:46:18'),(4,3,4,'joined room','2017-04-26 08:46:18'),(5,2,2,'Hi','2017-04-26 08:46:41'),(6,4,12,'joined room','2017-04-26 08:55:01'),(7,4,11,'joined room','2017-04-26 08:55:01'),(8,5,12,'joined room','2017-04-26 08:55:24'),(9,5,8,'joined room','2017-04-26 08:55:24'),(10,4,11,'Hello\n','2017-04-26 08:55:32'),(11,6,15,'joined room','2017-04-26 09:03:14'),(12,6,16,'joined room','2017-04-26 09:03:14'),(13,6,17,'joined room','2017-04-26 09:03:14'),(14,6,18,'joined room','2017-04-26 09:03:14'),(15,6,19,'joined room','2017-04-26 09:03:14'),(16,6,20,'joined room','2017-04-26 09:03:14'),(17,6,21,'joined room','2017-04-26 09:03:14'),(18,6,22,'joined room','2017-04-26 09:03:14'),(19,7,12,'joined room','2017-04-26 09:03:44'),(20,7,15,'joined room','2017-04-26 09:03:44'),(21,8,4,'joined room','2017-04-26 09:05:29'),(22,8,5,'joined room','2017-04-26 09:05:29'),(23,8,6,'joined room','2017-04-26 09:05:29'),(24,8,7,'joined room','2017-04-26 09:05:29'),(25,9,12,'joined room','2017-04-26 09:05:51'),(26,9,13,'joined room','2017-04-26 09:05:51'),(27,9,14,'joined room','2017-04-26 09:05:51'),(28,10,31,'joined room','2017-04-26 09:06:26'),(29,10,32,'joined room','2017-04-26 09:06:26'),(30,10,33,'joined room','2017-04-26 09:06:26'),(31,10,34,'joined room','2017-04-26 09:06:26'),(32,10,12,'asdfasdf','2017-04-26 09:06:34'),(33,9,12,'THis aisdhfioafew','2017-04-26 09:36:45'),(34,4,12,'Hiehfihef','2017-04-26 09:36:51'),(35,4,11,'asdfwef','2017-04-26 09:36:57'),(36,11,74,'joined room','2017-04-26 09:39:08'),(37,11,75,'joined room','2017-04-26 09:39:08'),(38,11,76,'joined room','2017-04-26 09:39:08'),(39,11,77,'joined room','2017-04-26 09:39:08'),(40,11,12,'Greetings','2017-04-26 09:39:13');
/*!40000 ALTER TABLE `Message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `PrivateRoom`
--

DROP TABLE IF EXISTS `PrivateRoom`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `PrivateRoom` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Room_Id` int(11) DEFAULT NULL,
  `Combined_Users_Key` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `Combined_Users_Key` (`Combined_Users_Key`),
  KEY `Room_Id` (`Room_Id`),
  CONSTRAINT `PrivateRoom_ibfk_1` FOREIGN KEY (`Room_Id`) REFERENCES `Room` (`Room_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `PrivateRoom`
--

LOCK TABLES `PrivateRoom` WRITE;
/*!40000 ALTER TABLE `PrivateRoom` DISABLE KEYS */;
INSERT INTO `PrivateRoom` VALUES (1,2,'Jian DuMatt Hubbs'),(2,3,'Hao Wang (haow4)Jian Du'),(3,4,'David WalesDehua Chen'),(4,5,'Dehua ChenLukasz Borowczak'),(5,7,'Andrew BloombergDehua Chen');
/*!40000 ALTER TABLE `PrivateRoom` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Project`
--

DROP TABLE IF EXISTS `Project`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Project` (
  `Project_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(100) DEFAULT NULL,
  `Description` varchar(5000) DEFAULT NULL,
  `Max_Capacity` int(11) DEFAULT NULL,
  `Status` varchar(100) NOT NULL DEFAULT 'Created',
  `Team_Id` int(11) DEFAULT NULL,
  `CreatedByStudentId` int(11) DEFAULT NULL,
  PRIMARY KEY (`Project_Id`),
  KEY `CreatedByStudentId` (`CreatedByStudentId`),
  CONSTRAINT `Project_ibfk_1` FOREIGN KEY (`CreatedByStudentId`) REFERENCES `Student` (`Student_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Project`
--

LOCK TABLES `Project` WRITE;
/*!40000 ALTER TABLE `Project` DISABLE KEYS */;
INSERT INTO `Project` VALUES (1,'Bear the Bull: Stock Market Analytics','\nDESCRIPTIONThe Bear The Bull site will provide research and analysis capabilities for investors as well as the ability to buy and sell stocks.  Users will be able to analyze stocks of their choice by reviewing trends, history, volatility, and most importantly customized suggestions.  We will maintain the user’s transaction history so that we can suggest relevant investments tailored to their preferences.  This will include stock prices the user is comfortable purchasing as well as favored sectors (such as technology or health care).Our site will provide a portfolio building experience unlike any current financial help site available.  It will save investors considerable amounts of time by quickly and efficiently providing relevant data from the stock market and past transactions. We plan to put the power in the user’s hands by giving them an interactive site that helps them build their stock portfolio and continuously enhance it as additional information is gathered.USEFULNESSSimilar to what Yahoo (or RobinHood.com) has, but we are much more customizable.We provide services including making customized query/analysis to users, crawling other social media for most updated news, and making stock transactions via the website. It’s useful in the way that unlike Yahoo and RobinHood provide status quo analysis, the user can make their own analysis or judgement based on their customized query or dig into high volume social media information. With more advanced information, the user can beat the other competitor and gain profit.REALNESSThe data used for this project is all real data. A Python crawler is used to obtain data from various sources, including Yahoo Finance and Open Knowledge Foundation. We use all 500 constituents companies of S&P 500 index as our data sample. S&P 500 index is one the most popular broad stock market index used in the financial market.Three types of data are collected:Company profile data. It provides a summary of each company; the attributes include “enterprise value”, “total number of shares outstanding”, “sector”, “address”, “business summary”, etc. Stock summary data. It provides a most recent snapshot of each company’s stock information; the attributes include price/earning ratio, beta exposure to the entire stock market, average trading volume, dividend yield, previous 52-week high and low, etc.Stock price history: the daily price history spanning from 2000/1/1 to 2016/12/31 for all 500 stocks are scraped from Yahoo finance. In total, over 1 million records are stored and used for the price history data. Each data record includes information such as ticker, open price, intraday high and low, closing price and total trading volume. FUNCTIONALITYBASIC FUNCTIONSAs suggested above, we shall be using static data from Yahoo for working with our application and our database will contain relations for stocks, stock prices, users and user transactions. We will be able to add/update/delete stock records in the database as well for maintenance purposes (?). This way the users can query relations for specific company stocks, stocks with highest price, observe the daily highs and lows etc. These kinds of queries can be performed using join operations on two or more relations. Once users log into the website and buy/sell the stocks they want, the transaction would be added to the database along with their details. This information will be used for historical tracking purposes of stocks.ADVANCED FUNCTIONS:Stock recommendations based on Price and SectorUsefulness: Our application will be capturing the stock information in database along with their price as well as sectors (eg. tech). When users purchase/sell the stocks these transactions will be captured in our tables as well. So when they sign in to make their next transaction, they would be able to see possible stock suggestions based on their own personal history of past transactions. Additionally, these suggestions would be further filtered by sectors/prices etc so the user can browse all categories with ease. This will add a personal touch for each user with respect to what stocks they see, making our application more useful and intuitive for them. Challenge: This would be a bit challenging for us to implement in technical terms since we will have to add constant monitoring capabilities for individual user transactions. Also this information will have to be stored and maintained for them in a way that it does not mix with other users’ transactions so as to make the suggestions personal. This would involve having a customized polling approach that looks out for specific transactions on tables and verify the suggestions via thorough testing.   Novelty: This feature would be different from other similar applications because usually they indicate the current in-demand stocks based on live stock exchange status rather than user’s choices. This would separate our application from others by making it more customizable and handy from the user’s persp',4,'Created',NULL,1),(2,'Engineering Master School Finder','\nDescriptionOur goal is to help people who want to pursue an engineering master\'s degree to find the most appropriate academic programs, according to their desired school ranking, location, applicant’s GPA, GRE and other indicators. Also, based on the essential function of our website, we build a sharing platform that users can share their comments on a specific program and an admission prediction function that using users’ application results to get the admission probability of programs.UsefulnessWhen people want to apply for graduate school, the general procedures waste much precious time. People need to look through dozens of the official website of universities, filter their desiring schools manually during to schools’ ranking or location and so on, then compare the program’s requirements related to their major and their real truth. These manual procedures can be optimized by computer technology.There already are some helpful websites such as US News that can enumerate the top ranking of universities and programs. However, US News cannot restrict the specific condition such as GPA and GRE, and it cannot combine the requirements from clients and find the most appropriate programs for clients. Also, clients of US News cannot share their comments on a specific program which could be very helpful for other applicants.Our website fixes all the problems mentioned above. We will combine the requirements from students and consider students’ basic information, then find and recommend them the most appropriate programs. Also, the comment function and admission prediction function are very helpful for the clients in our website to assess their desiring programs comprehensively.RealnessThe school ranking and program ranking will be collected from US News. The data related to specific school and program such as school’s location, Tel., minimum GPA and so on will be collected from their official websites.Description of the functionalityI.         Basic Functions:Considering the data’s reality and usefulness, we decide to scratch some real-time data from USNews.com, www.harvard.edu, www.uiuc.edu, etc. more than 100 websites, to crawl raw data like contact info, campus location, postal code and so forth.Use mySQL language to insert/update/delete records to the database.Use mySQL language to show tables joint, filter, and so on search operations.Add comments of users into database, like creating a table, comment (userid, programid, commentNo, date, content, grades and marks,)II.         Advanced Functions:1. Visualize university info on dynamic U.S. map.1)    Prepare the map canvas used for hitting universities on2)    According to user’s request, end-front will calculate and fetch the satisfying results from database, and get and project the address information onto map canvas.  3)    Program front-end application, to pop up bubbles, which stands for an university located on that place on map, once the request enquiry has got correct returned data; and once user wants to move mouse onto one bubble, there would be a little widget putting up and shows the university information like address, rank, websites, application requirement info and so forth.4)    Move mouse to other bubble, and repeat step (c).5)    Click on bubble, a super link will occur and bring user to specific university page.2.  Recommendation System1)    Users input their one or two target school2)    Do pattern mining based on all users applications according to users\' target school2)    Generate a list of schools and list them on website 3.  Real-time Data Capture1)    Implement web crawler to collect programs information from college rank websites and related programs official websites.2)    When users search for programs information, web crawler captures data from related websites automatically to make sure programs information are up-to-date\n',4,'Created',NULL,4),(3,'Accipere','\nDescription:We will be developing Accipere (pronounced “ah-chi-PE-ray”), a mobile-friendly Web application for managing receipts digitally and providing users with data on how they spend their money. Usefulness:The application will be useful because it will let you view all your spending in one place, without having to log in to all your bank accounts and then having to write down or calculate all your spending over multiple websites. It will also let you see what items you spent your money on, without forcing you to keep physical copies of the receipt.There are a few different websites with mobile apps available, including https://www.concur.com/, https://www.shoeboxed.com/, and https://www.certify.com/, among others. Our application will be different from theirs because it will be more geared towards individual users, and it will allow you to choose which form of payment you used to pay for the receipt, including be able to choose which account you used to pay for it (credit card 1, credit card 2, debit card 1, checking account 4, etc)Realness:Data Collection: We’ll have real users taking pictures of receipts with their phones and interacting with the central server via a Web interface.  Most people have to deal with receipts on a daily basis, so plenty of data will be available.Basic Functions:Insert/Update/DeleteWe will insert records into the database when creating a new account, creating a new receipt, and starting a new login session.We will update records by allowing users to change information related to their account and allowing supporting data for receipts to be modified.We will delete records in the database by allowing our users to remove purchases from their history of past purchases.Advanced Functions:One of the advanced features we would like to include is optical character recognition (OCR). This would allow data such as the purchase total to be automatically read from a receipt rather than being manually entered by the user. We think this would be a cool feature, as it would allow users to more quickly store their purchase information in our application, and would just be a great quality-of-life feature.The second advanced feature we would like to implement is heat mapping of users spending habits. This would create a graphical representation of where the user(s) is making purchases based on how many purchases have been recorded within a certain geographical area. We thought this would be a cool feature because it would allow the user to graphically see where they are spending their money, but it could also be of use to businesses, who could potentially use a heat map of all of our users purchase data to determine which areas are hot spots to open stores at.\n',4,'Created',NULL,8),(4,'Foodlicious','\nDescriptionFoodlicious is an idea for users to share recipes and give feedback to/from other users, similar to stackoverflow.This site allows user to create their own account and set up an user profile. Users can upload their own recipes and see other\'s recipes.Users can review others\' recipes including a rate, tags and comments and  receive feedback for their own recipes in the same way.Every recipe will be given a rate by each review and a ranking system will be established for recipe ranking based on its overall rating, tags and comments.Each users\'s data as average ratings to other recipes, average rating of his own recipes will be recorded and shown in the profile page.Users can search recipes by various criteria.UsefulnessRecipe sharing is a very popular idea these days. We\'d like to create a website where users can upload, get feedback on their self-published recipes from other users, search recipes, and also be recommended with recipes. The advantage of our website compared to other recipe blogs is that we combine multiple functions together. For users, you can both upload and search for recipes. You can also rate recipes and a ranking system of recipes will be established so that you will automatically recommended with recipes that you may like. RealnessOur data will mainly consist of recipes. In addition, we will play with users\'profile, search history and the reviews of recipes including comments, tags, ratings, and consequent evaluation attribute such as ranking.Our recipes can be uploaded by the users. But most of our recipes will be obtained from the web. Reviews can be generated by users or retrieved from websites. FeaturesBasic Functions: -Creating and modifying User Accounts(Registration & Log in)-Uploading and Deleting files-Viewing, Comments and Feedback on  recipes-Rating and adding tags to recipes-Searching with multiple criteriaAdvanced Function:-Ranking recipes based on their ratings, tags and comments-Recommend recipes based on similarity between users and recommend high-rating, low-calorie recipes:We intend to build a recommender system using user based collaborative filtering method. The basic idea  is to find the user who is most similar to the current user, and use the ratings from this most similar user to make recommendations. Also, we need to consider the actual usefulness of the recommendation so that we return those results with highest ratings/rankings and lowest calories. \n',4,'Created',NULL,12),(5,'Rate My Classroom','\nDescriptionRate My Classroom is an idea similar to that of Rate My Professor, except instead of rating the quality of people or classes, it rates the quality of the classrooms.The site would allow users to give an overall rating to the classrooms and lecture halls they have attended class in, write descriptions of their experiences there, and add tags for specific aspects of the rooms. Such examples of tags would be:  no leg room, no lefty desks, lots of broken desks, air conditioning (yes or no).Users would be able to utilize reviews left by others to help search their potential classrooms and see whether or not they want to consider switching sections to a different classroom.  Along with searching information about individual classrooms, users could search for certain features (tags) and get a list of all the classrooms that have those specified features.  For example, a user looking for classrooms with air conditioning, leg room, comfy chairs might get a list that includes such rooms as DCL 1320, ECEB 1002, and Siebel 1404.  Another feature includes the ability to see if two classrooms are able to be traveled between in the standard 10 minute passing period.  This would include traveling by foot, bike, and public transportation.UsefulnessTo get the information on what buildings/classrooms are used for classes, as well as what classes are taught in each building, the UIUC Course Explorer API would be used – the results of these searches would be stored in a database.The actual ratings and tags for each classroom would be user generated.The information about the travel time between buildings would be derived from the Google Maps API.The travel time between each building on campus is stored in a database.Walking and bike times are storedBus time is a live-lookup due to time-of-day sensitivityDescription of FunctionalityBasic FunctionalityStoring ReviewsViewing ReviewsApplying filters to search data by tagsAdding tags to classroomsCreating user accountLogin as userLogout of userAdvanced FunctionalityAllowing users to find buildings with the features they desire that are within walking or biking range of a specific buildingThe information about the travel time between buildings would be derived from the Google Maps API (with the travel time between each building on campus stored into a database).    \n',4,'Created',NULL,15),(6,'Go Together','\nDescriptionPeople often meet a problem: I want to check out a new restaurant or watch a movie or going somewhere, but no one goes with me. This is a common problem among a lot of people. So we are planning to design a website to help people find mates to do something together. We call the website GoTogether. On GoTogether, people can view other people’s proposed event, propose event and look for mates or find/provide a free ride.UsefulnessThere is no unified platform to look for mates and people are in need of such platform. Facebook Group is currently a similar platform. Facebook group is created and maintained by individual. There may exist multiple groups for just movie watching. Users may miss an event if they are not in the group. They may also have a hard time on deciding which group to join in and they may found themselves lost in massive and unorganized posts.  On GoTogether, you don’t need to join a group to propose an event or check what others proposed. You will not miss a post and posts are organized by category(movie, restaurant, etc). RealnessWe will create user profiles and posts manually.  User profile will contain user’s username, email address. For free ride post data, it will contain post id, user id, event start date, event end date, seats number, destination and current location. For other post data(movie, restaurant, etc), it will contain post id, user id, event start date, event end date, category and location. All Posts data will also contain comment message. NotificationDescription of the functionality:Basic Functions:User login/logout/registration/update profile.Users can make a post or delete a post on events they are interested in. For example, they can invite people to have dinner or watch movie together; they are allowed to offer a lift or request for free-riding. Posts are categorized and user can filter post based on its preference or search for specific contents included in posts. User can reply to a post or start an asynchronous conversation with people who have common interests.User gets notification when people are interested in his/her event or their individual demands can be potentially satisfied by particular posts.Advanced Functions:(1)Geographical Clustering and Path OptimizationFor students who offer a lift (named as provider) and who request free-riding (named as requester), their location should be considered. We store current location of both providers and requesters in database and keep a record of their destination. If some requesters have the same destination as well as similar time, we should perform geographical clustering based on their location to form different groups. The groups are then assigned to a couple of nearby providers depending on their locations. In this sense, each provider is in charge of several requesters in his/her neighborhood without driving far away to pick up other requesters. After the group and corresponding provider are determined, a recommended path should be generated for providers to pick up each requester in his group. The path is computed based on a weighted graph derived from local maps and should be optimized to reduce the total cost of routing. Tentatively, the clustering can be implemented by K-means algorithm and the path optimization can leverage approaches designed for Dijkstra and Travel Salesman Problem.(2)Related Events RecommendationWe will use data mining technique and based on user’s viewing, searching and posting history to recommend event or other user. For example, using TFIDF to compare post similarity. More data mining technique will be added as we go deep into the project. \n',4,'Created',NULL,23),(7,'FitFeed','\nTeam 9project title: FitFeedproject summary:   A webpage platform that give users recommendations of healthy food and allows users to search for food based on categories and calories as well as order and receive orders from other users.  DescriptionIn US colleges, it is really hard to eat healthy: there are limited choices of restaurants, and a lot of restaurants are expensive and not healthy. Dining hall does provide healthy choices of food but is overpriced and only offer meal of limited time: 12 dollars for lunch and 15 dollars for dinner. Often, college students do not have time to have healthy meals every time. Too often, college students don’t have time to calculate the calories for each meal combining the results with the suggestions of how many calories they should intake per day.Our project recommends healthy food choices based on calories and nutrition facts. It also serves as a buy/sell platform of homemade healthy food at lower prices(no intermediate costs), in which users can search for food, order food, sell food and receive recommendation of the intake calories per day as well as fitness facts at one place. Usefulness  Our application is somewhat similar to regular take-out restaurant website and app, such as Grubhub and Orderup that focu on online food ordering. Moreover, our application will recommend food and restaurants based on the calories the users need to intake per day, and get fitness facts and suggestions of healthy diet and eating.Users would like to know more about healthy diet and eating. To help them achieve this goal, this webpage will  give customers the information of how many calories it contains in the food of their choices, the application will also calculate the suggested amount of calories intake based on the users’ personal information when they create their accounts. We will build a chat platform, so customers can chat with sellers or other users to order food. This is a very useful functions especially when customers don’t know what to choose and have specific requirements of the food they choose.  Realness  Data types:User’s basic information related to fitnessNutrition fact of food/dishesHealth advice and fitness recommendationsRestaurant informationData resources:Yelp/Google reviewNutrition fact database(myfitnesspal.com, etc)GrubhubFunctionalityBasic Functions:Log in / outUser information storageFood search based on taste, calories, nutrition, price and othersCalculation of recommendation of Calories intake per dayPlatform for buying and selling food Advanced Functions:Real-time chat with other users/restaurantsFood / restaurant recommendations\n',4,'Created',NULL,27),(8,'Housing Bubble','\nFunctional Description:        This project aims to help people who want to search for housing renting information. The project will feature a database based on housing information. Because of the presence of many areas or regions like Urbana-Champaign which is populated with out-of-state/alien residents like international students, faculties and many other diverse groups of people, the market for renting information is in great demand. Therefore, we decide to build a platform that targets this group of people.        The platform will require users to sign up for an account and be logged in to look at renting information. The sign-up process, as you can imagine, asks for a username, a password, and other optional information like their age or major to contribute to the recommendation system used later. Users will have their own profiles based on their sign-up information. The information includes but is not limited to their phone numbers, email addresses and so on. They will be able to edit their profile if they wish later.         Housing/renting information will contain attributes including but is not limited to location, price, size and housing conditions. Users can browse the housing information with their specified requirements on attributes like location, rent, size and facilities.         Users can add houses to their favorite lists, which is maintained in the database. Users will be able to set, modify or delete their favorite list.  Also the browse history of the users will be automatically saved and can be modified or deleted by the users. The browse history combined with the favorite list will be used for the back-end to dynamically produce recommendations to the users.         One of the advanced techniques of this project is the recommendation system. As mentioned, the database keeps a track of the users\' favorite list and browse history. Using machine learning techniques and other advanced algorithms like nearest neighbor clustering algorithm, the system will be able to generate (ideally) high quality recommendations to users. The users can give either a positive or negative feedback to help improve results.        The other advanced techniques is smart search. We will allow users to make queries like \"houses within 10-min (distance) walking (means of transportation) distance from Grainger(center location)\" and \"houses with four bedrooms, at least two bathroom, and dryer and washer\". The system will return the best fitting results based on users\' request. \n',4,'Created',NULL,31),(9,'WeDate Pro','\nDescription:We will design a dating website that helps people to find the person that want to match. There are two kind of searching, the first one is to search by key words (like gender, age, nationality, hobby or appearance) the second on is to search by selecting several pictures of “fake” people so that the system will automatedly recommend some person for you to match.Usefulness:There is a similar app called Tinder that is an app designed for dating service. However, in Tinder we could not set the preference and only wee the people we want.          This project will help people to find idea dating match by two kind of search. The first one is based on word description and the second one is based on pictures. Therefore, people can find the people they want to date either by personalities/hobbies or appearance.Realness:           There will be 10 to 20 true accounts created by group member and their friends.           There will be around 100 fake accounts generated randomly          Basic functionality:?   Create account?   Update account?   Delate account?   Search account?   Display account profilesAdvanced functionality:PrototypeSet the preference of one account at the time you create the account. Able to edit later.People\'s information is stored in the questionnaire (mainly appearances, etc.). Moreover, they can also set preferences for the people they would like to know. Based on this information, the system will generate six recommend pictures that you can look for detail, or you can select two pictures and the system will generate another six picture based on your selectionMatch and leave a messageYou can search for the attributes you select and match with other people, when you click \"match\", the information is sent to the people you want to match and you can also leave a message to her/him to further introduce yourself. The message can be updated later\n',4,'Created',NULL,35),(10,'CU Events','\nDescription:A site for finding events in the Champaign-Urbana area based on different categories such as music, sports, theater, and technology as well as different event types such as concerts, presentations, and workshops.Users will be able to create accounts where they\'ll be able to set their interests, receive recommendations, post comments on a specific event, and post their own events and create communities for a specific interest or activity.The goal of this site is to allow users to find events that align with their interests as well as to try to expand their interests by exposing them to events that they may not have been able to hear about otherwise.Usefulness:Similar sites exist such as Eventbrite and Ticketmaster, however, our site aims to be different through postings of events with specific interests and smaller organizers such as RSOs. We will also allow users to create their own communities that will help members communicate with each other and stay up to date on a particular club or activity.Realness:Data on the site will be in the form of user messages and event details such as name, start and end date, location, price, and description. Our data will come from crawling sites as well as from users themselves. Sites used for crawling will include Eventbrite, Ticketmaster as well as smaller sites specific to Champaign-Urbana such as the sites for different RSOs.Functionality:Basic:searching events by category, event type, start/end times, price, etc.creating and modifying user accounts with your own interestsposting your own eventscreating and searching for communitiescommunicating with other users through messages on events and communitieslinking from events to other sites where you can buy tickets for the eventAdvanced:recommendations for users based on their interests and what events they\'ve recently viewedautomatically match up stock photos to each event based on event details\n',4,'Created',NULL,39),(11,'Project Summary / Slogan','\n\"Yelp\" for flighta. Description Up in the Air is a website that records and provides statistical analysis of the history of the users’ flights, airlines and airports. There would be a personalized travel map, which marks the added flights. It is available for the users to add relative photos and comments to flights, airports and airlines. And they can also find friends with same or similar schedules, chat with their friends online and check the details of their flights if they are allowed.b. UsefulnessUp in the Air can be an effective way for the travelers to keep track of their flights of where you\'ve been and how you got there. It is also a social platform, where the users can contact with friends in the same flight. One similar web application with ours is called “Flightdiary”. Both two websites record and analyze flight information of the users. But in Up in the Air, we provide the functionality for comment and upload picture for including each airlines, airports and flights for people.  we also provide searching for friends on same or similar flights, which is not available on Flightdiary, while ours can search for friends based on their sharable flight information like dates and airlines. Online chatting is available between friends. c. RealnessThe data our web will deal with will be divided into six entity sets: User, Comment, Flight Record, Aircraft, Airline and Airport. The User relation will contain attributes id, name, account and password. These data will be gotten directly from input of users. The entity set Flight Record will include attributes like ID, flight number, date, depart time, arrival time, class, seat, and purpose. These data will comes from user when they add a flight to their account. However, our website will also automatically search for source airport and destination airport information for them. The comment will be a weak entity set supported by User sets. The comment will contains attributes like timestamp, content, URL of photos. These data will also be gotten directly from input of users. The data such as Airport, Airline and Aircraft will be directly crawl from online free database (Openflight.org). For airport, it will contains attributes like ID, name, city, country, ICAO, IATA. For aircraft, it will contains attributes like ID, model, manufacturer. For airline, it will contains attributes like: ID, name, country, ICAO, IATA. All of the data we are talking about is easy to retrieve and meaningful in our design.d. FunctionalityBasic Functions:An account system where the user can login with their email address and password. In the account the users are able to add new flights their flight record, add comments and add friends for chatting. Users are able to look through the history of his flights and informations and even query from the website to see statistics and graph of their trip records. The searching system of information of a specific airline, airport or flight to read comments and see pictures of airports from other users to have a better knowledge about their trip in advance.Advanced Functions:Social Mail: The website will allow user to search for people to share the same trip and chat with them in advance, so people may have friends during the boring flight.Data Visualization: Visualize user generated flight record with pie/bar/line charts and google maps for routes. This way, our user can better understand and analysis their behavior of air life.\n',4,'Created',NULL,43),(12,'QueenOfLibra','\nDescription Can not decide what to eat? Hard to make choice every time? Deciding a place for lunch could sometimes be a super annoying and energy consuming progress. This App saves those who has OCD in making food decision. Unlike common recipe recommendation App, we do not simply providing information to you, we are trying to make choice for you. Based on the feature data of restaurants and user behavior, we utilize Machine Learning algorithm to figure out users\' preference model and recommend restaurants which the user are very likely to enjoy. By collecting user\'s feedback, we can constantly revise the model and make the recommendation more precisely. Usefulness.  Our application is designed to help you make decisions for choosing what to eat. It recommends restaurants for users based on preference Q&A and users\' meal history. For example, it will avoid recommending food that a user just had yesterday. If no preference given, the application will randomly pick one based only on history.It will be similar to some other restaurant rating or recommendation applications like Yelp, but not the same because it is not only a list of restaurant information but most importantly, a decision maker of what to eat.Realness.  Our Data is the restaurant information in Champaign, including the name, address, food menu, food style and rate and so on. The data could be collected by searching form the existing food recommendation app such as Yelp. In addition, the data could also be created by users themselves. Description of the functionality that you plan to offer. This is where you talk about how to meet the advanced functionality requirements.  There are two types of functions you need to offer Basic Functions: 1. showing data of the restaurants and their menu2. adding new data entry, deleting data entry, update data entry 3. query and return the corresponding resultsAdvanced Functions:1. recommend restaurants based on preference Q&A answers and features of each restaurant. 2. adjust the users\' preference model with Machine Learning algorithms based on users\' history. These advanced functions are cool because they will provide more personal recommendations to each user. We are applying Machine Learning algorithms to avoid recommending the same restaurant the user had yesterday. Theses functions also allow us to match restaurants with users\' preferences better. \n',4,'Created',NULL,47),(13,'Illini Fantasy','\nDescriptionThe goal of the project is to produce a fantasy sports website for University of Illinois sports.  This fantasy sports game will support the bulk of the NCAA sports played by athletes at the University of Illinois.  Participants will compete by selecting fantasy athletes from the various supported sports.  This fantasy game is cross-sport, so that basketball players and softball players (for instance) can all be part of the same team.UsefulnessThis application has two synergistic purposes.  The most obvious purpose is that it is a game which should be entertaining to participants.  Fantasy sports have been around for over a decade and is well-established as entertainment.  However, our application is different from every existing fantasy sport application in that participants can assemble fantasy teams using athletes from multiple sports, to compete against each other on the basis of statistical models configured by users (not hard-coded in our application) at the start of each virtual \"tournament\".  The players may come from any Illini sport competing during the time frame of the fantasy tournament. This is a design challenge as the statistics of a softball player need to be normalized in some manner to the statistics of a basketball player.  The second, ancillary purpose of the application is that it will help to promote the lesser-viewed college sports as anyone competing in our fantasy tournaments will have an extra incentive to learn about and follow all Illini sports - not just those gaining attention from ESPN.RealnessThe bulk of our data are statistics from NCAA athletes competing in University of Illinois sports. This data is available through the University of Illinois \"fighting Illini\" website.  For the production of the prototype, we will use statistics from the past as a proxy for real-time data.FunctionalityBasic FunctionsReal Illini sports data will be collected.  This data exists as pdf\'s on the Illini website.  Pdf is not the best format for crawling so we will consider requesting the data in a more amenable format from the athletic department.User / participant accounts will be created for a sufficient number of users to hold fantasy tournaments.Insert/update/delete will be used for user account information (passwords, etc.) as well as tournament creation.Advanced searches using table joins will be used to determine the winners of individual tournaments.  This will require joining sports statistics across various diverse sports along athletes chosen by the participants.Additional searches will be available to view past performance so participants can make informed decision on assembling their best fantasy team.Advanced FunctionsFunction #1Users will be able to initiate tournaments in which they can dynamically establish their own game rules, for example, dynamic weighting of the relative importance of sport/athlete performance metrics. In this manner, tournament designers can build individual rule sets which emphasize the diversity of Illini athletics as well as require research and skill to win rather than simple luck.Function #2 One complexity of building a fantasy application which spans multiple sports is how to measure \"great\" performance vs. mediocre or poor.  Our second advance functionality will be to design individual sport performance metrics based on their relative deviation from the average.  For instance, if the standard number of rebounds for a basketball player is 2 per game, 4 would add many fantasy points while 1 would provide few if any.  Similar metrics can be designed for other sports - for instance, the average number of hits during a softball game may be 3.  6 hits would result in a large bolus of fantasy sports while 0 would be few if any.\n',4,'Created',NULL,51),(14,'Shoetopia','\nThe e-shopping experience has become flooded with garbage entries that make it quite a challenge to find the hottest sneakers. We have meticulously constructed the greatest shoe catalog that will let you find the perfect sneaker for you. Our team scours the web for the best shoe websites which we then compile into a massive database from which we get your own personalized shoe of the day which is what sets us apart from all the competition. The basic functions of ShoeTopia include a database that can update information about each individual user, each individual shoe, and also a set of hand-picked websites which contain only the greatest shoes. The advanced functions of the website include an expert analysis of your history to select an amazing shoe of the day just for you. Another amazing feature we have looks at the aggregate history of all our users and finds the most popular shoe and gives you the shoe of the month. Overall, ShoeTopia is revolutionizing the shoe shopping industry and we have a 100% guarantee that you will get nothing but the most amazing sneakers on the market.\n',4,'Created',NULL,55),(15,'Travelmate','\nDescription We want to make traveling easier, and allow travelers to have more fun with more companions. To do this, our web application mainly helps users make reservation on hotels and can help travelers who have already reserved a specific hotel to connect with potential friends who wish to travel together.Usefulness  Our hotel reservation function is similar to Expedia: users can search and filter results at their choice, make reservation by only one mouse click, and receive recommendations based on their previous reservations. But what is unique about our project is its social function: many people are traveling alone and want to have someone to travel together, but they do not know people around them in a hotel. After they make a reservation on a specific hotel, they can find other people also go to that location at that time (if those people also want to have someone to travel with) based on reservation those people made, and they can contact with each other.RealnessUser data: name, gender, age, email, this can be obtained when user register the account, and search history is trackedHotel data: name, price, location, photos and ranking information, this can be obtained by manually inputting data from websitesComment data: comment on user (whenever the user publish their information, other people can leave comments on them) and comment on hotel  Functionalities  Basic functions: 1.     Sign up/ Sign in (use third party entry)2.     User profile editing 3.     Search hotel by name or recommend a list of hotel which satisfy the search criteria offered by users and print out results4.     Make reservation5.     Find other travelers also traveling to that place6.     Chat with other users after adding them as Friends7.     Leave comments and ranks for hotels 8.     Delete user Advanced functions:1.     Provide users with more filters to modify the search result, such as price, location preference, and brand 2.     Enable to users to upgrade to prime member by paying a price, prime members can receive discounts and rewards occasionally3.     Recommend other hotel similar to the previous ones whenever user want to make reservation again4.     Interesting API(may not count)5.     Enable online payment using virtual currency6.     By destination, offer some recommendations of food, tourist spot and travel strategy to user (skd and yuki)\n',4,'Created',NULL,60),(16,'Longan','\nDescriptionLongan is an application that curates career fair information from multiple universities. This application aims to allow high school students to make informed decisions and assist university students attending career fairs.  UsefulnessThere are no similar web sites/applications that we know of.RealnessCareer fair, university, and company information will be retrieved using a web crawler.Description of FunctionalityBasic FunctionalityAllow user to filter results by major, university, and/or companyDistinguish among industries (e.g., tech vs. finance) using color tagsCompare career fairs over time (i.e., by year, fall vs. spring semesters)Advanced FunctionalitySuggest related companies given a user\'s top choices using data mining techniquesRepresent the (number of) universities recruited by a certain company on a map\n',4,'Created',NULL,64),(17,'Atacama','\nAtacama is a digital library. We will focus on freely-distributable ebooks since we can actually deliver them. We accumulated a database of ebooks from sites like Project Gutenberg and Creative Commons. We allow searching for ebooks, reading ebooks, editting book lists, and visualizing related books.Usefulness and RealnessAtacama is a digital library promoting literacy. Why is promoting literacy important? According to the Nevada Department of Corrections, some prison systems \"plan how many jail cells they will build in the future by how many children are not reading on grade level by third grade.\" We believe that the future of society depends on literacy. Albert Einstein said, \"If you want your children to be intelligent, read them fairy tales. If you want them to be more intelligent, read them more fairy tales.\" Albert Einstein knew that promoting literacy nurtures an intelligent society.Atacama is a digital library and ebook reader whose goal is to promote literacy by remove barriers to literacy. Barriers we address include (i) convenient access to books, (ii) prohibitive cost of books, and (iii) pleasant discovery of new books. The following paragraphs addressed these problems, how Atacama solves them, and how existing services fail to solve them.A public library system serves much of the world. But many people lack convenient access to libraries, especially children. The problem is worsened by budget cuts, limited hours, and even library closings. At Atacama, we believe that the reach and convenience of the internet is greater than that of libraries. Atacama is a digital library which serves books to everyone in the world through the internet.Even with convenient access to a library, the selection may not be satisfactory. Many libraries are small. The inter-library loan system is known to be slow; some request a service fee. Atacama provides instant access to a large library of books for free. Our library consists of free books from Project Gutenberg [note: currently a subset of all the books].After providing access, we believe that the biggest problem is providing a means to discover new books -- too many options may be overwhelming. Eric Schmidt of Google said, \"Every two days now we create as much information as we did from the dawn of civilization up until 2003.\" To remedy, Atacama provides three tools to discover new books: a term frequency-inverse document frequency based search engine, a visual graph with related books, and the ability to share book lists with friends. We hope that these three tools, used individually or together, provide a pleasurable and non-overwhelming book discovery experience.In comparison to existing online services, companies like Amazon and Scribd provide access to books, but often at a prohibitive cost. Projects like Gutenberg provide free books, but lack book discovery features. We combine the best of these services: free books like Gutenberg and useful features like Amazon and Scribd.The main goal of Atacama is to empower society by fostering a curiosity and love of reading. We hope to accomplish this goal by providing an accessible interface to discover and read books. We hope that Atacama will, in-turn, improve society.Description of FunctionalityBasic Functionality - Modern and aesthetically pleasing user interface through a Single Page App (SPA) supporting both computers and mobile devices.- Book reading in the browser- Booklist sharing, with user authentication- Advanced Search Engine supporting fielded boolean queries with wildcards and proximity queries- Support for drilling down into searches using facetting- Visualization of related booksAdvanced FeaturesAdvanced Feature 1: Search engineOur advanced free text search allows searching through the entire corpus of books using a complex and powerful query language which support boolean queries, wildcards, and proximity queries. This feature allows you to discover new books which might be of some interest. The search algorithm is based on term frequency-inverse document frequency. This algorithm is widely used as a base for search engines like google. The basic idea is that you have a set of documents, each of which has a list of terms. For each document, you count how many times each term appears. Then you divide that by how many documents the term appears in. This ensures that terms which are unique to a specific document, and appear numerous times in that document, contribute significantly more to a search score than terms which appear in every document a lot of times (An example of the first type of term might be something like \'Alice\' in Alice in Wonderland, and the second would be the word \'the\'). We also use lists of stopwords so that words that we know are not unique (i.e. \'the\') don\'t adversely effect searching.Our advanced search also allows us to calculate facet values for specific fields. We currently support facetting on author, language, subject, and if the book is public domain or copywrited. This',4,'Created',NULL,70),(18,'TeamMatcher','\nTeamMatcherProject Summary: The project aims to create an environment that simplifies teamwork among students and professionals who want to embark on new technical projects. Such service will be provided by saving user information on database systems. Furthermore, the system will use the stored data to recommend possible team compositions to user who have expertise and interests well suited for the project at hand. A.DescriptionWe intend to build a system that helps students to form a well-balanced team for a specific project. For example, for CS411 this year finding a team was a challenge as the class is very large and there are too many students/projects to consider. Our system would accept the description of the project, a set of skills each student has and will try to find a best match for a group of a certain size.B. UsefulnessSince the system is going to be used for helping students to form well-balanced teams for their projects, it might save their time, result in better teams and eventually lead to more interesting and successful projects. Instead of checking Piazza posts and their emails for hours, in an attempt to find a perfect match, our system will suggest best possible options for a specific student that will be well organized and easy to assess. The system will eliminate the initial confusion of trying to form a team in classes as large as CS411 is.C. RealnessWe will be using a list of descriptions and members from the previous projects of CS411. We also plan to gather our CS411 classmates’ attributes via survey and crawl project descriptions from the project pages. (and form groups within our class and see if the virtually formed groups match the original groups.)D. Description of the functionality that you plan to offer. I. Basic functionsa.Our application will have data from current and past students about projects and either level of satisfaction with teammates, or grade of the project.                        b.Our application will allow a user to create and edit a profile                        c.Our application will allow a user to search for teammates for a certain project and return a list of potential candidatesd.Our application will also allow users to query for students who are in a certain class and return a liste.Our application will allow a user to search for students who have certain attributes II. Advanced functionsa. Our application will order the potential teammates list using machine learning to predict the best teammates and best projectb.Our application will allow users to input available times and figure out what the best time to meet for a given project will be.c. Our application will allow users to link their github and will parse through it to verify their skillsd. Our application will allows users to rate their teammates, both overall and on each attribute, and the users will have a self assigned score and also a user reviewed score\n',4,'Created',NULL,74),(19,'NextGreatChef','\na. DescriptionWe would like to build a recipe sharer web application that helps our user to learn and share different recipes from all over the world. Transmitting the cook culture worldwide.b. UsefulnessThere exist a few cooking tutorial websites/applications already. However, they either only focus on bakery or just sharing American style recipes. Our web app will be more comprehensive that includes worldwide categories such as Chinese or Indian recipe.Our website will provide a text and image based online cooking tutorials for users. They can search the ingredients they want to use in our website and get lots of different recipes for the ingredients they searched. Since a lot of people are having problems cooking meals or deciding what recipes they should cook, our website will both provide lots of recipe choices and a detailed text tutorial for each of the recipe in our database. The similar things compared to equivalent websites are basic layout for the main page and the recipe page, but we will provide a data visualization for user’s browsing history.  c. RealnessWe will collect our recipes from various sources: popular recipe websites, user inputted recipe, and our own recipes.d. FunctionalityBasic Functions:User can create an account by providing basic information such as username, password, real name, etc.Insert function: User can add his/her own cooking recipe to the databaseUpdate function: User can modify the recipe and update it to the databaseDelete function: User can delete his/her own recipe from the databaseSearch function: Given ingredients or keywords, user will get a list of corresponding recipes          Example:                   -If you search “beef”, you can get a list of recipes which contains beef.                   -If you search \"american\", you can get a list of american recipes.Advanced Functions:Recommendation:  We will recommend some recipes to user based on user’s viewed history and the maximum intake of calories he/she want.MapOfFavorites: Initially it’s a world map with several images of different countries. When the user add a recipe that belongs to certain category in their favorite list, it will show up on the favorite map. For example, if user add a kung-pao chicken into their favorite list, then when user click the image on the corresponding position(China\'s land), a list of his/her favorite Chinese food will appear(and it should only have kung-pao chicken as its element by now.) Next time the user add certain Chinese food as his/her favorites, he/she should expect an update on that list. And we will update the list once the user add a recipe into the favorite list.\n',4,'Created',NULL,78),(20,'Spotlight','\nDESCRIPTIONSpotlight is an application that attempts to tackle the ongoing problems with mainstream media. The user will be able to upload unbiased content in order to pave the way for the new wave of journalism. The application will allow for a medium in which every day people are truly in charge of what news they consume by cutting out the middle man and obtaining primary sources of information. USEFULNESSThis project will bring transparency, accountability, and clarity to the way we find out about injustices in this world. People always complain about a news outlets heavy bias whether it be right leaning or left leaning. This application will allow users to create unadulterated content for the masses. REALNESSThis project does have real world uses, as people will be able to share content that they have encountered in their daily life with other users of our app and with people around the world if they choose to. FUNCTIONALITY      Basic Functions View media(audio, video, pictures) from users through a user feed Comment on media Post media to the feed, and add tags and a description to this media      Advanced Features  Data Management: Several key pieces of data will be both stored in and retrieved from the database in real-time (or close to real-time) User Experience: Although this seems like something belongs in the \"basic functions\", our UX will be one that the user is familiar with and has used before, but also one that is unique and jaw-droppingCustomize a feed for each individual user, if they choose to \"like\" or \"ignore\" media with certain tags\n',4,'Created',NULL,82),(21,'Tweetory','\nDESCRIPTIONTweetory is a project that aims to provide a better understanding and visualization of events that are happening across the world. The user will be able to search for keywords in the tweets and also see how tweets relating to a certain event are spanning the world.USEFULNESSThe project will allow users to get a better understanding of how daily events are impacting the world. Many a times a horrific event does not get covered because of where it happened. Sometimes people do not truly understand how the entire world has reacted to a certain event. Through our project, the user will be able to get a better understanding of what’s happening around the world and how people are reacting to it. REALNESS We are going to majorly use data gathered from the Twitter API thus ensuring that all data is real. The API also allows us to get location information about every tweet which we will use to determine how people around the world are reacting to an event. FUNCTIONALITY      Basic Functions Updating the tweets data in real time.Use data acquired by using the Twitter APISearching through tweets to show the responses to an event. Using hashtags.      Advanced Features Data Visualization - We plan to map the tweets collected onto the world map based on certain hashtags. We will use the geodata associated with a tweetData Mining - We plan to use data mining to determine what are some keywords that are common to the tweets relating to a certain hashtag/event.  \n',4,'Created',NULL,86),(22,'Stream Soup','\nDescription: Stream Soup is an application that aims to help users by recommending TV shows based on the streaming services they use, their previously watched shows and their general entertainment preferences. The problem Stream Soup is attempting to solve is the disconnect between different streaming services and the content that they provide. A user should be able to simply check Stream Soup to find new/existing TV shows as opposed to logging in to several streaming websites such as Netflix, Hulu, Amazon Prime Video, Crunchyroll, HBO etc. Along with this, there are several other features further explored in the functionality description section. Usefulness:Our application is more efficient than currently available resources because it eliminates the need for users to log in to various applications in order to find TV shows. The main competing application does not provide extra services that Stream Soup would, such as user reviews, recommendations (based on user preferences), integration with Facebook and usage analysis.Realness:Firstly, the primary database required for this project is one containing all of the different available streaming applications. Several streaming services provide a list of the TV shows and films available. Using a basic web scraping tool, such as \"Beautiful Soup\", the relevant data can be extracted and combined to form a larger, more comprehensive database. Several attributes of each show would be recorded such as cast, genre, release year, etc. Another category of data Stream Soup would require would be the information about the users, their reviews and their streaming preferences. This would be obtained using Facebook and user-inputted information. Connecting to other review-based websites (eg. Rotten Tomatoes, imdb, Metacritic) can be directly accessed as opposed to expanding our own database.Functionality Description:Basic Functions:Searching TV show database by attribute such as title, genre, year of release, cast member etc.Add/Remove shows based on new releases/removals from servicesAbility for user to add reviews for TV showsLink to rating websites Advanced Functions:Integration with Facebook to get friends’ recommendationsThis is cool because having friends is cool (or so I’ve heard). In all seriousness, it provides a dimension of interactivity between friends and finding people with similar interests.Usage analysis of various streaming services.This is cool because one can review the TV shows that they’ve seen on various services and determine which ones they would like to continue paying for and satisfy their curiosity in knowing how many hours of my life did I spend watching TV this year (cue existential crisis)?Weighting of user reviewsThis is cool because not everyone uses the same mental scale to review shows, therefore this would normalize the data and give a better depiction of the overall show rating.Concerns:A lot of the data we require is not necessarily available for use, and therefore we anticipate running into certain roadblocks in the creation of Stream Soup. However, as with any project we plan to be adaptable to available resources by being dynamic with our functionalities.  \n',4,'Created',NULL,90),(23,'2RedHearts','\nDescription Campus-based online dating social network website. Aiming at helping students to find their girlfriends/boyfriends on campus.Usefulness One of the biggest concern among college students is finding boyfriend/girlfriend. Why?Students from engineering say there are too fewer girls in the same class, and girls from business college say that too fewer boys in the same class. With that being said, the gender ratio across colleges are very unbalanced. For students who spend most of their time in classes, labs, It’s kind of hard for them to find proper people to date.There are apps like Tinder, which can show people around. But it cannot restrict to a specific campus. Students tend to find their boy/girlfriend who is also students in the same campus. Our web aims to help only registered students to find their true love. RealnessUser data: Personal information, for example, name, age, major, interests, gender and brief self-introduction. This data is obtained through user registration.Geographical data: campus places, for example, library, building, coffee shops. This data is obtained through manual input.Functionality that you plan to offerBasic functions:Insert/delete comments into database when users creates/deletes commentsUser profile editingSearch for users by filterHomepage, display popular usersComment boardAdvanced functions:Recommended People (based on friendship network, preferences, etc.)Come and Greet, Recommended Places (based on geo location)\n',4,'Created',NULL,94),(24,'DropMuse','\nDescriptionDropMuse will allow users to signup to receive playlist recommendations based on the types of songs they enjoy. Users will be able to enter specific songs and keywords, and DropMuse will make a playlist that is specifically relevant to that input. We will scrape song lyrics to provide the ability to search by relevant keywords and provide more accurate recommendations. Users will then be able to offer feedback on the generated playlists, which will allow DropMuse to refine the recommendations to become more relevant to what the user wants.UsefulnessServices like Spotify generate playlists, but do not let users create playlists from keywords. We will be able to generate more relevant playlists by letting users seed our recommendation algorithm with songs and keywords that they are already interested in. We will also place an emphasis on using lyrics for song recommendations, which many other music services do not currently take into consideration.RealnessWe plan to scrape our lyric data from sites like Genius, AZLyrics, Lyricsplanet, etc. By combining these disparate sources of lyrics into one centralized service, we will be able to leverage this data to provide better recommendations. We will scrape song genre data and metadata from other music services like Spotify and Last.fmDescription of FunctionalityBasic FunctionalityUsers will be able to sign up for accounts, and create playlists seeded by keywordsUsers will be able to navigate and view their playlists, and click links to listen to the songs.Users will be able to share the generated playlists with friends.Advanced FunctionalityWe will perform sentiment analysis and entity extraction on our database of lyrics to better inform the algorithm we will use to generate playlists. Our idea is that lyrics hold a lot of latent information about songs, so careful and automatic analysis of the lyrics will allow for better song recommendation than is currently available. Users will be able to thumbs up or thumbs down tracks on each playlist to indicate whether or not they thought that track belonged in the playlist.We will create a generalized scraper to scrape the variety of publically accessible lyrics website to create a large dataset of song lyrics. This scraper will be general enough to support the major sources of online lyric information.\n',4,'Created',NULL,98),(25,'Build your PC','\nDescription:We want to build a website that allows users to be able to buy all the components required to build a computer. This site would be allow the user to work with specifications (like size of computer, data processing speed, screen resolution etc) and still generate a component set which has every required component to build a PC.Usefulness:Our website is useful to people who would like to build computers for specific needs and for people who are generally interested to not go with market based ready-made products, which can be significantly more expensive.There exists a website which is somewhat similar to what we are creating, pcpartpicker.com.However, it has no way of recommending how to build the entire pc. Our website would be specifying exactly what components would be appropriate given a certain number of restrictions to work with.Realness:Our data includes the various specifications of several types of PC parts.Example:There would be a relation for disk memory which would have the attributes of price, capacity and name of the disk memory. We plan to gather our data by crawling data from multiple websites. To list some of the websites we plan to crawl the data from:Amazon.compcm.comNewegg.comBasic Functions:As mentioned in project description.Advanced functions:Recommend a combination of PC Parts to user based on high-level specifications (like price, case form factor, VRAM, or allowing specification of individual attributes of parts)Allow users to publish sets of specifications and allow other users to use them as a subset of specifications in their queries (for example, “good gaming build” could be “CPU clock speed > 2 GHz, graphics card has at least 2GB VRAM, system has at least 16GB of RAM” and then a user could use this and further stipulate “the whole thing costs less than $1500”).This includes having to maintain a record of the user’s input sets and since not every published set could be held record of and showed to other users, we need to keep a ‘like’ system in which other users are allowed to like the specific set that others have published. The sets with the highest likes would be shown to other users. This would be a very dynamic feature changing as per the number of likes on any set.\n',4,'Created',NULL,102),(26,'Tag Along','\nDescriptionIt is a ride sharing android application that lets you find people driving to where you want to go and hitch a ride with them. It solves the problem of having to rent a car or take a plane if you are going far away, and also reduces the overall cost of the trip per person by splitting up the cost for more people.UsefulnessOur application is useful because it provides an easy and convenient way to get somewhere that you need to go if you don’t have a car or the money to rent one. Instead, you can carpool and use this app the find the person to drive you.There are similar ride sharing applications that already exist, such as Hitcharide, Ride, and Carma Carpool. Our application will be different because it will allow you to string together multiple rides and locations, as well as get off before the intended destination, in order to more flexibly allow people to get where they need to go.RealnessWe will use fake user posts as our data. Each fake post will be a user saying that they intend to drive somewhere, and then other users will be able to browse through these posts to join the rides. Also, we will use fake user comments that people leave on other people’s profiles as data. Advanced FunctionalityBasic FunctionsBe able to create an account and log in to which is personal to each userBe able to create rides that other users are able to join. Rides will be update-able with new information (i.e. driver decides to change price).Be able to browse for rides that are near you or go to/start from a specific location.Be able to leave comments on users profiles, and upvote/downvote/delete your comments those comments. Be able to reject/accept requests from riders to join your ride if you are a driver.Advanced FunctionsWe will use flexible graph traversal algorithms in order to connect riders with multiple ride providers in order to provide the best overall route from point A to point B. This is a cool feature because even if there is no ride going directly from point A to point B then you will still be able to get there - by going from A to C to B. Additionally, it will allow users to find the shortest trip- or even find the cheapest trip if they so choose.We created a variety of data visualization options integrated with Google Maps and using our databases in interesting ways to provide visualizations for the users to see statistics about rides and the app. This is a cool way for the users to interact with the application and view interesting statistics collected from ride data.\n',4,'Created',NULL,106),(27,'IlliniPost','\nDescriptionIlliniPost is a platform that is designed for UIUC students in order to let them study, make friends, and relax better. At IlliniPost, there are three main sections including Q&A, entertainments, and classes information. In these three sections, students can post questions, reply, and keep track of certain posts they focused. For the user who doesn\'t want to sign up an account, they can use keyword search to find useful information they are looking for and also ask or answer questions. For the user who has an account, they can own a custom page after they login so they can focus on the category they care about most. By using at IlliniPost, students of UIUC can have easier and happy daily life.Usefulness(Why useful) First, Many UIUC students such as my friends have many questions about classes such as how many working loads does this class have, how to get A in this class, and where are the chatting groups of this class, and etc. They are also interested in finding good restaurants. However, currently, there is no single platform that can answer those questions together. Students have to find those questions separately,  and in most cases, they failed to find the answers of those questions because of lacking resources. However, our platform can collect answers of those questions together, and students can post and answer all the questions they focused on this platform, which is very convenient and useful.(Similar applications and their disadvantages) Currently, Yelp can recommend good restaurants, RateMyProfessors can recommend good professors, and Piazza can answer some questions about classes such as how many working load does this class have; however, each of them only has one single function, and students have to go to those websites one by one in order to find the answers. What\'s more, RateMyProfessors\' answers are out of date since it only has the few answers about professors, and sometimes it even does not have any interviews about new professors. Piazza do have some answers about some classes, but they are not sorted well, and students sometimes who have taken this class could not see those questions at Piazza on time, so that they could not answer those questions.(Why our platform  is different) Our platform, the IlliniPost, can solve the above problems well. Since it is a unique and single platform that contains different sections, students can post all their questions in sorted sections, and students who want to answer those questions can see them on time by looking at specific sections. What\'s more, we will update the questions and answers on time so that users will not see the out of date information. Unlike Facebook, Twitter and other social networks, illiniPost aims at connecting the previous, current and future UIUC members, and together to make UIUC a better community.RealnessOur website contains data from three parts: Q&A, entertainment and academic. We plan to use Web spider (python) to get data from various website. For Q&A and academic, we can grasp data from reddit, course hero, Quora and Blogs. For entertainment, we can see reviews from Yelp, Facebook and twitter.Also we can add data manually by either writing blogs and registering on our own or inviting UIUC students to post there blogs and questions in our website.Description of FunctionalityBasic Functionality Insertion: People will need to post their questions, answers and experiences on illinipost, so adding those data to database will be essential.Deletion: Since we decide that unregistered user can also make a post on illinipost, it will be necessary for the administrator to delete spams and out of date posts.Update: For the user who wants to add or edit their post, update information to database will also be necessary.Search, list and return results: Search and return also play important roles in our website for users who is looking for a specific content.Advanced FeaturesHot-key clouds: In the main page, we will cross data from different websites, and analyze the search in our website. Present the popular keyword in the main page in a circle and all the keyword will move constantly in the circle clouds.  Trace tracking: Based on the search data and post data, give user a customerized main page category showing in their main page.  \n',4,'Created',NULL,109),(28,'NBA Game On','\nDescriptionWe would like to create a platform where basketball fans can have improved experience during the game season. Based on users’ favorite teams, players and other information, we will recommend match-ups and relevant information (such as pre-game and post-game news, game statistics) to them. After watching games and relevant news, one user could favorite games and players, and leave comments about the game. Based on feedbacks, we will adjust our game recommendation. We will also do some manipulation and visualization of  game statistics, which will give users more insight into games.Usefulness State as clearly as possible why your chosen application is useful.  Make sure to answer the following questions: Are there any similar or equivalent web sites/applications out here?  If so, what are they and how is yours different?1. Avoiding repetitive and unavailable for game information, users could find what they want at one place.2. Improving user experience by offering personalized gaming schedule. 3. Equip users “statistics” insight so that they could have more to talk about with their friends.Realness Describe what your data is and where you will get it.Relevant data involving  teams, team players, game location, game stadium, game time and relative pre-game and post-game news will be obtained from prevalent NBA websites such as stats.nba.com. For user-input data, we will invite friends to register on our websites to collect sufficient user information. FunctionalityBasic Functions:1. Collecting data from prevalent sports websites by APIs.2. Admins could insert/delete/update the user information and game information.3. User can search the game by related information such as teams, players and game time.4. Users can create their preference list of teams and players and request recommendation from the server.  5. Create a comment board for users to leave their comments for the games.Advanced Functions:1. Recommend games and relevant information based on players\' preference.2. Data manipulation and visualization of game statistics (Tentative application, we will show team performance in home games and road games, which will indicate whether there is home court advantage for one team)\n',4,'Created',NULL,113),(29,'Auction Central','\nDESCRIPTION/USEFULNESSWe will be creating an auction site with a social media component. eBay is the leader in the online auction world, but due to the fact that nearly any product can be publicly sold on eBay, it is often difficult for the user to find what he/she is looking for. One reason for this could be that sellers are not able to target their auctions to certain groups of people, requiring the buyers to scroll through many unrelated items to find the product they desire. Additionally, Facebook has buying and selling groups, for example, UIUC’s Textbook Exchange group. These groups lack the ability to coordinate auctions (they simply have a \"Message Seller\" button), so sellers can easily overprice or under-price their products, which is sub-optimal. We seek to harness the strengths of both services by combining them together into an auction website allowing you to only see auctions that are of interest to you.REALNESSOur product data will be collected from Amazon. We will be \"auctioning off\" these products. In addition, real people will be creating the user accounts and we will create pre-made groups for common interests, with the ability for users to create their own groups.BASIC FUNCTIONSThe basic functions of the website include:Create user accountsLog into their user accountsPut items up for auction, specifying a start and end date, and upload an imageAssign products to a category, where categories are hierarchical and can contain sub-categoriesBid on itemsCreate auction groups under specific category(es), specifying the location of the group and, if desired, the radius, outside of which users will not see the group (discussed more below)Delete their own groupsJoin an auction groupEstablish connections with other users (similar to any other social media site)ADVANCED FUNCTIONSRecommendation SystemOne advanced feature will be a recommendation system, requiring the use of machine learning algorithms.  We can use this to suggest new auctions to the user based on what groups they are a part of, the product itself, the popularity of the product, in addition to other features.  We can use a similar algorithm to recommend groups to users. Search by LocationThe other advanced feature will allow the user to specify a \"central location\" geocoordinates of a group, if desired (this would be useful if the user wanted to create a local group, say, only for Urbana-Champaign residents). Then, any user could search for nearby groups and be presented with this list. To obtain the geocoordinates of users or groups, we will use the Google Maps API to retrieve these coordinates. They will then be stored in our database, and we can use the spherical distance formula to compute the distance between two of these geocoordinates.\n',4,'Created',NULL,117),(30,'Viz.io','\nDescriptionThis application is a real-time data visualization tool that takes in any type of data such as, sensor data or stocks, and produces a real-time visualization model of the user’s choosing. There is also an option for predictive analysis, which finds correlation between the different data points inputted into our tool. The problem we are trying to solve is the lack of optimal real-time data visualization. Our solution is to create a seamless tool that takes in variable data inputs and presents a user friendly model with API capabilities. UsefulnessThere are existing tools made from utilities like D3.js that are able to visualize an inputed dataset. However, currently, there is not a similar application capable of data visualization for such a wide range of datasets, from stocks to Internet of Things. Our application is a one of a kind tool that makes viewing data simple and can adapt to any user’s needs. What makes us different is that there is a vast amount of data, especially with things like IoT, that do not have a clear means of communicating what the data means. Our advanced functionality solves this problem.RealnessOur data is real data fed from existing datasets (from both hardware like sensors or Nest thermostats as well as software such as Stocks APIs). It is continuous and versatile, meaning that there is a constant stream of data. The beauty of this application that essentially any data can be inputted and our application will adapt to meet the needs of the user. FunctionalityBasic FunctionA couple of basic functions include importing data, creating and managing user profiles, manipulating the database of data, and printing out data info. For the demo, we are going to simulate data from a sensor by creating a script that will generate random numbers from multiple sensors. In addition, each user will have a different database for their specific data. Once the data is imported, the user can insert, delete, or update the data (3 of the CRUD operations). The data will also be categorized by either sensor in our sensor example or by companies for the stock example.Advanced FunctionPredictive analysis - cool to have this because it can allow users to extrapolate further and use our application to make their own conclusionsComprehensive API support- cool to have this because it can allow us to make our product open source such that other users can modify the codebase to optimize the real-time algorithms, etc.Data visualization- cool to have this because there is a vast amount of data, especially with things like IoT, that do not have a clear means of communicating what the data means. Our advanced functionality solves this problem.Managing multiple user sessions and keeping them isolated- many apps have scenarios in which multiple users are using the site at once, but ours involves modifying a common dataset (e.g. stock data) while keeping this modification isolated to that userReal-Time- cool to have this because instead of taking pre-gathered data (like what D3.js or other tools do) we can optimize and render to deliver immediate resultsHours spent implementing the above functionalities \n',4,'Created',NULL,122),(31,'InternX----an internship hunter only for students','\nDescription We are going to do a very formal internship websites only for college students. Many internship websites right now are not that useful. We are going to get all the resources of top companies websites and from schools, and then post to our application. We do not invite recruiters. What we do is to set a big database for internship for students to search. Simple and clean.Usefulness.  There many internship websites in the market right now, and most of them are complicated and do not have a focus. Many universities also have their own career service, however, in our application, we are only a big search engine and a useful platform for college students to find internship. It is simple and efficient. We manipulate our methods of computing and data collecting to gather as many internships as possible to put on the websites to let students to search with a simple search. There are no fancy and complicated structure, but just all the information for internships.Realness.  We will have company names and the positions each company provides as our data. User information is also a part of the data. We will crawl the position information from the webpages of the companies.Description of the functionality. Basic Functions: Position Lists:The webpage crawls top 50 companies from different fields occasionally and lists the real-time open positions (outdated positions will be deleted from the database).Sign-up/ Sign-in:User will be recommended to register first so that the webpage’s advanced function can better work for the user. There will be two ways for the user to fill in the registration form: he can either type in the information manually; or upload his resume and check the autofill from his parsed resume. (The webpage will provide parse and autofill function.) The user is welcome to re-upload a new resume, edit or delete his information later.Favorite Positions:User can bookmark/unbookmark his interested/favorite positions. He can check these positions as a list in his home page. He can rearrange the order of the bookmarked positions in his personal position list.Advanced Functions:Resume Parsing:The webpage will parse the uploaded resume and autofill the registration form for the user so that the user doesn’t have to type in the registration form (usually long) by himself.Job matching:The webpage will search the data base and match the user with his suitable positions. The match will use the information such as major, interest, past experiences, fluency level of skills, etc as references.Job search engine:This function is similar to the previous one but this function enables interaction from users. User can type in any key words and the engine will search the most relevant result for the user (just like a normal search engine, but only job positions will be listed).\n',4,'Created',NULL,126),(32,'Buddy and Game Finder','\nProject Title: Gaming Buddy FinderProject Summary: We hope to build a platform that allows gamers to quickly find like minded people to game with.Description: We want to build a web application takes in user information via manual input and also by connecting with their game profiles in order to match gamers with others based on interests, skill level, location, etc.Usefulness: People nowadays are feeling depressed and games are often their only option to escape reality. By using our platform, we offer a user friendly yet useful network to link between gamers to promote relationships. It will be useful for busy, lonely people, whether they are students, businessmen or what-not who have no time to build large communities of people to game with, a chance to interact with people. Our platform aims to provide a quick match between users to play games of their favorite, and possibly build a feedback system on the users of their friendliness, helpfulness on games, or other features. Our platform is different from existing platforms because other apps generally provide a list of players based on a very broad search so the user has to do most of the work going through all the profiles and find a good fit. Our recommendation system will do this work for the user and provide a quicker, less frustrating experience.Realness: We will be getting data from users. The data will input their interests on the genres of the games, the platform of the game the user uses, the skills of the users, and the user profiles. The profiles will include the languages, the ages, gender and similar interest outside of games so that when users become friends they can have common interests that will promote the relationship. We will also pull statistics from various websites such as Steam to add on to the profiles.Description of the functionality that you plan to offer.Basic Functions: The basic functions will be adding user profiles and inputting appropriate data. Also, we\'ll have player circles, a review system to give feedback on who was fun to play with, and Advanced Functions:We will have a recommendation system to suggest matching players using a decision tree.We will add on to profiles by connecting accounts with platforms like Steam and retrieve necessary information from online sources to enhance user profiles.\n',4,'Created',NULL,133),(33,'On The Rise','\nDescription: We plan to design a web application which promotes lesser known artists and connects them with a broader audience. Usefulness: Our application has the potential to act as an avenue for independent artists to have their own break in the music industry. It also provides listeners the chance to broaden their musical libraries with unique songs that the mainstream industry does not create.  Realness: We are looking into the Soundcloud API or using a web-crawler in order to retrieve the necessary data (i.e date posted, number of views, like/dislike ratio, etc). We will also incorporate user data in the form of user voting. This will be used to adjust our algorithm in order to better recommend music to a individual user\'s tastes. Description of Functionality:Basic Real Data:Soundcloud API TracksUser Profiles Insert,Update,Delete Search the database, List or Print returned resultsAdvanced Promotion of ArtistsMusic Suggestions based on User VotingCommenting On Songs (not supported by current database design)\n',4,'Created',NULL,136),(34,'College helper','\nTitle: College helperSummary College helper provides various tools for students to manage their academic life.DescriptionCollege helper is a website which helps UIUC students who major in CS, ECE and ECON to schedule classes and to communicate with other students who have same class.Firstly, every student has to decide what they will take next semester. Sometimes this is a pretty difficult job. Suppose one student has a tough semester so that he cannot spare the time to meet his academic advisor. In this case, he needs to check several websites to list future classes and this is a cumbersome process. But with College helper, this job can be done easily. We offer easy managing of a student\'s academic life. Depending on major, standing and interest, students can get a best-fit of their class schedule. Also they can track their GPA and academic progress which indicates remaining credits and requisite courses to graduation.Secondly, we offer a forum for students who want to find a study-group or share an opinion about a certain class. Many classes use Piazza to ask a question or have a discussion but after finishing the semester, the Piazza system is no longer was managed by anyone,so it is really hard to get useful information for a student who wants to take that class in the future. As soon as a user adds a course to his course timeline, he automatically joins the registered class forum and he can see past discussions, look for study groups easily and use this website as his secondary tool for future classes.UsefulnessCollege helper is useful in two ways. Firstly, they can easily manage their academic work. There are several websites that offer this functionality. Namely, UIUC enterprise, compass 2G and moodle. But the functionality is spread out over these websites. For example, we can see GPA, earned credits, and standing but there is no way we can find a best-fit schedule depending on several factors like preference and major. So it will be absolutely useful if student can use such a system. College helper aims to bring the functionality of all these websites to one place. There is also no centralized source where a student can find opinions and discussions about classes from past students. There are several websites that provide similar information  like ratemyprofessor.com or koofers.com. But often times, they only show student’s opinion about the professor and not the class itself. College helper offers a simple forum where a student can easily find and interact with students who have taken the course before.RealnessGenerally, we have two data sets: one for the course timeline and other for forum.For the forum, as posts are made by users, we will be storing the threads, comments, user information, date/time of post and which thread each comment was posted in. This data will accumulate as the website is used. There is no initial data.For managing system, we need student’s academic records and information of classes. First of all, user will type basic information like his GPA, taken classes and standing when they sign up to the website. Data about the class will come from each department websites and course catalog provided by UIUC office of registrar. After gathering data, we will combine the information and make a more interactive and comprehensive databaseDescription of functionalityBasic Functions: Add,  remove and view courses from the course timeline. Courses will have all the relevant course information like credit hours, professor, etc. Each course will be assigned a difficulty based on the average grade of students from past semesters. The website will basically be like a combination of DARS and the course catalog. The website will also offer information about core course requirements for graduation depending on the user’s major. Each user will be able to login and view/edit their course timeline and plan out their four years in college. Advanced Functions:We plan to offer an autofill function where depending on the user’s major, we will display a completely filled timeline that would show when the user should take each course over their 4 years. This would require a combination of information about what each major’s core courses are and in what order they need to be taken and how they can all be spread out over the 8 available semesters. This feature can help new students get an idea of what their college timeline should look like and they have some kind of default timeline to begin with which they can then edit according to their preferences. We also plan to offer a forum/message board where students of the same major can communicate. Each major would have their own message board where users can post comments and discuss various things or ask for help if they need it. We can add further complexity by adding tags to comments and then letting users search for comments that only relate to a particular class that they are interested in.  \n',4,'Created',NULL,140),(35,'Booking Up','\nDescription: Right now, dating applications are very superficial, with people selecting potential mates based on physical features. We aim to overcome this problem with modern day dating by connecting people through more substantial interests - books! Booking Up is an application that matches people up based on similarities in their reading tastes. Users input their personal information and their interests, like favorite books, authors, and genres, and an algorithm will present them with a list of potential matches that they share similarities with. The user is then free to start conversation with a match if both have expressed interest in the other.Usefulness: There are plenty of dating sites already available such as Tinder and Bumble. Our application is unique because it connects people based on their readings interests over something more superficial. Our application is useful because it caters to the crowd who are looking for a meaningful relationship that they aren’t able to find on available dating platforms and allows them to form connections based on something more significant. Realness: Our book related data such as authors, genres, and book titles will come from web-scraping Goodreads while the rest of the data will be user generated.Basic Functions: For the initial choice of books that users can select, we will be write an automated web-scraper that will select the 100 most popular books. In addition, we will have 10+ developed accounts, of users, who will potentially be matched.Some possible examples of inserting will be adding to new users to the application and updating will be change the user’s book preferences and characteristics.The interesting queries would be joining the book and user tables  in order to join users that like the same book or similar genres of books for potential dates and we will be able to print potential joins. Another potential query is creating a table that would contain all the information on the books that a user has liked.Advanced Functions:In order to connect people with others who best match their reading interests, we’ll be implementing a ranking algorithm. This will sort people into a list with those who have very similar interests, like a particular book, in the beginning and less specific interests, like a common genre, towards the end.We will also be implementing a feature that allows users to see which book, genre, and author led them to the most “successes”, with success being defined as conversation initiated after a match.\n',4,'Created',NULL,144),(36,'Dream Deals','\nDescriptionThis application works with a real time web crawler to find prices of searched product from online retail stores like Amazon, Costco, Walmart, Sam\'s Club, Target, eBay, Jet, BestBuy, Kohls, Macy\'s, JcPenny and Sears. The prices will be displayed based on filtering decided by the user with links to the product page on original website.The application will allow users to create a profile and add other users’ profile to a friend list called “My Gang”. The user will be able to share his/her wish list with users in his/her friend list. His/her friends will be able to provide feedback (in terms of comment) on each product on the wish list.Another feature of the application will track historical data of product prices over a period of weeks and provide a predictive scoring indicating the best time to buy the time.UsefulnessThis application extracts products information from various online retail stores and provides the price information without having to browse websites individually. This not only saves users’ time but also provide a comparison tool of product prices in one page. The product selection list on the application can be also determined by certain advanced filters indicated by the user. For example:Products that qualify for free shipping;Products that are sold by the third party;Products that have customer reviews of greater than 4 stars.This above filtering is unique in providing the user control over search algorithm.Some online retail websites allow the sharing of wish list with friends but does not have the inbuilt facility of allowing friends share their feedback on the product shared. A friend in the “gang” can be an expert on a product and may suggest buying the same from a different brand. All feedbacks between friends can either be public or private based on user preference.Plotting minimum price of a product over a period of time can be a major advantage in the decision making process of user. From the historical plot the user can gage the time period when he/she gets the best deal on the product and plan his/her finances accordingly. The application will obtain historical data of product price by using a web crawler at certain intervals from website of retailers.RealnessProduct data will be crawled from online retail website like Amazon, Costco, Walmart, Sam\'s Club, Target, eBay, Jet, BestBuy, Kohls, Macy\'s, JcPenny and Sears. User data will be generated manually by users accessing the application.Basic FunctionsUser can access the application as a guest. Data about the product prices will be crawled based on user search criteria mentioned above under Usefulness section.Inserting records will occur when users create their account and when users create wish list. Last five products searched by a user will be recorded in the database and will be displayed when the user logs back in.Updating records will occur when users send link up request with other users and share wish list and when the application crawls new data about product prices.Users’ accounts and wish list can be updated or deleted from time to time.Advanced FunctionsSocial Media and Recommendations: Friends in the user’s friend list can provide feedback on each product in the wish list. Feedbacks will be inserted into the database. The feedback can either be private or public based on the feedback providers’ preferences. We will also show a recommended list of friends and items one can buy.Historical Data:Web crawler will run periodically to save pricing data of various products to the database. The user will be able to pull out the historical price of saved products over a certain period of time. The price tracker will also provide a predictive score which will help determine the best time to buy the products.  \n',4,'Created',NULL,147),(37,'Tripub','\nDescriptionOur project enables people to create, edit and share their travel plans online. We hope to create an online community for those who love traveling. Our project will allow people to share their own experience as well as communicate and exchange ideas with others.UsefulnessTripAdvisor, Triphobo, and Kayak are all similar websites, which provide information about local attractions, hotels and restaurants. But there has not been a website that makes travel a social event. Our web app will create an online community for travellers so that they can share own travel plans, clone and modify others\' plans, and chat with people interested in the similar plans.RealnessOur raw data of travelling attractions will be collected from websites already existed out there, such as TripAdivsor. TripAdvisor provides APIs for people to access their data. Some other data can be collected from web crawlers we wrote. FunctionalitiesBasic FunctionsUsers could log in through Triphub authentication system with their own user names and passwords. They could also create and edit their own profiles.Plans should be created by users. Days should be appended to a plan by the user who originally create the plan. For a day created by the user, elements such as sightseeings, hotels, restaurants and transportation could be added by the user to the specific day.Users could also copy plans created by others, edit their plans, delete their plans.Other users could add comments to plans post.Plans could be searched by users according to sightseeings, plan names, transportations, hotels, restaurants. Advanced FunctionsRecommendation System: User\'s traveling plans will be analyzed by a python program, with the help of ML libraries. When user is creating new plans, at least 5 \"things to do\"s will be recommended to the user based on data analyzed.Forming a travel group and chatting online: Users having similar travel interests could form a travel group by sending a request to a travel plan owner when they browse a specific plan on our website. After the owner approves this request, they can open a live chatting room and chat about their plans and share informations in real time.\n',4,'Created',NULL,151),(38,'UIUC Event Locator','\nDescriptionAn application that allows users to geotag events and classified ads overlaid onto a map of the surrounding location. By default the application uses the current location however the user can do this by dropping a tag onto a particular location on the map.This would allow them to see the different events and advertisements around the tag.The users can create events in our application, we will be storing this information onto our database. We would use the past events information, to create a heat map which shows the most popular locations for events. Additionally, we will be creating a feature to recommend events to the user and we will allow users to pay for the cover fees or products directly through the application.The users will be able to locate the events that their friends are attending. They can also filter events based on time periods, group sizes and specific event categories. UsefulnessThe following applications have features which are similar to ours:Meet upCraigslistFacebookVenmo /PaypalWhat sets our project apart from the applications listed above is that our application will combine the best features of everything listed above. Also it will add a unique and novel map overlay, which will make finding events and classifieds easier than ever before. Additionally, the event suggestion, friend finder and heat map provides functionality that nothing else does.The popularity of specific of location is a valuable data, which many companies would like to have access. RealnessThe user data, their name, id and friend list will be derived from facebook. We will also be using the facebook to log into the application. The user will be able to input their own personal information. The past hosted events and user ratings will be taken from the events created in the application and the users who attended them. For the events and classified, ids will be autogenerated within the application, to provide a unique number. The description, start times, end times, names, locations, max group sizes and fees will be inputted by the user. The map will be taken from the google maps api, we will only be using this to generate the map. We store our own coordinates for the events, and we will be developing an algorithm to fence off specific locations in order to specify where they are bound within the map. We will determine the popularity of the location based on some algorithm which will use the past events data as well as friends that would have visited at those locations in the past. FunctionsBasic FunctionsCreate EventsUpdate Personal DescriptionFilter Events on MapAttend EventClosing off events past max group sizeReview event hostPay for event or product feeAdvanced FunctionsFencing off specific locations: Determining general terms that people use \"the quad\" , \"south field\" that are not necessarily bounded by specific coordinates.This will make it easier to locate the events and determine the popularity of specific locationsGenerating a heat map for location popularityThis is a data visualisation method, which will nicely determine where other users tend to host events in certain cities or campusesIt would be great for universities or property owners to advertise, for example, the engineering quad may be UIUC\'s most popular event locationSuggesting events for usersThis will be a useful as it will make selecting events for users significantly easier  \n',4,'Created',NULL,155),(39,'Crossroads','\nDescriptionCrossroads is a website where open source project maintainers/owners can list their projects to help find contributors. We want to make it easier for developers to find projects that they can join and help grow the open source community by increasing project discoverability.  While we believe our site can be helpful to anyone wanting to participate in open source, people who participate in open source voluntarily will likely benefit the most as we will be recommending new projects to users based on their interests. Rather than hosting the repositorites ourselves, the goal will be to list any OSS project so that people are able to see the wide range of projects and software that exists and make it easy to find something new to work on.UsefulnessDiscoverability is not a major focus of major repository sites like GitHub. Open source relies on having contributors able to join and help develop projects. Github explore is a basic system that GitHub has to try and allow developers to find new and interesting projects. Our goal is to be a location that developers can use to quickly find something interesting, with a focus on displaying key metrics up front that developers that are looking for a project want to see.RealnessWhen users add a new repository to our website, they can provide a GitHub/GitLab/Bitbucket repo link, and we will pull data about that repository and display that data on our websites, allowing other users to view all of the data without having to go directly to the repository.  If the project is self-hosted or hosted somewhere else, we will allow the submitter to provide their own data about the repository which will be displayed.  We will also get the top 100 repositories in terms of open source contribution from Github and GitLab so that our users will have a base of repositories to browse.FunctionalityBasic functionsAdd Projects: Project owners can add projects to our website by providing a name, description, and link to the github or Bitbucket page of the project.Update Projects: Project owners can change the data of projects that they have added to our website.Search Projects: Users can search projects through name, tag, topic, platform, and languageFilter Projects: In their account page, there will be a list of options which will change what the user sees.  For example, there will be a languages box, and a user could choose to only see Ruby projects.  Users will be able to filter by programming language, platform, and other broad categories.Tag Projects:  Users can add tags that they think appropriately describe a project.  If a tag exists in the database already, it\'s rating attribute is incremented indicating that it is now a more relevant description of the project.  If the tag does not exist, it will be added to the Tags table.View Project History: Each user will be able to view projects that they own as well as projects that they have contributed to in the past or are currently contributing to.Advanced FunctionalityFinding Similiar Projects: We will have a \"project feed\", which is each user\'s home page, consisting of new projects and projects that the user has been matched with. We will use our tagging system to help us do this.  We will use the user\'s project history to help determine new projects that they might be interested in joining.Matching Projects with coders: This will be done by having each user fill out a form on account creation, where they will answer questions about themselves so that we can match them, using some algorithm, to projects that we have on our website.  This will be done only on account creation.  Our algorithm will be related to the algorithms employed by dating websites to match users to other users.  This will involve putting the tags into a matrix and using the least-squares solution to determine the projects that have attributes that match closely with the users\' interests.\n',4,'Created',NULL,159),(40,'Smart Movie (e.g., Movie Information and suggestion Database)','\nDescriptionOur website stores movies\' information by crawling from various movie rating website. We will let user search, make reviews on and like movies. Sometimes, viewers cannot find new movies that they like. Our website solve this problem by letting users like movies ,and suggestions will be  generated based on users\' likes.UsefulnessWe want to make a movie website which can not only let you rate and search, but also gives you accurate suggestion based on the movies that you liked by implement machine learning. IMDB is a similar website while it doesn\'t give suggestion or notification.RealnessOur entity sets are movie, actor, director, user and review.Movie have name, year, rating and have multiple subclasses like romance and action. For movie information, we will crawl current movie websites like IMDB and rotten tomato. User data will be input by users. Review will be made by users and append to movies. Director and actor data will be crawled from movie websites like IMDB and linked to Wikipedia.Description of the functionality that you plan to offerBasic Functions: (1) Crawling data from other website  (2) User can make review and we will Insert/delete/update (3) Given the search constraints, conduct basic query that searches the database and list or print the returned records. Advanced Functions:(1) Based on users\' preference history, it give smart suggestion of similar movies using machine learning algorithm.(2) Web crawling different websites and integrate data by connecting duplicate records. (3) Based on users\' preference, find similar future released movies and send email notification before the premiere. \n',4,'Created',NULL,163),(41,'REFERENCES','\nProject TitleREFERENCESProject descriptionREFERENCES is a website for users to manage and find good papers to cite. Except basic query can be achieved on this website, this website can give the recommendation based on the user personalization. Unlike the Google Scholar \"pull mode\" website, the REFERENCES is more likely a \"push mode\" website.UsefulnessTo help users finding high-quality papers in their research areas. Easy for users managing their downloaded and published papers. There are several website similar to ours such as Google Scholar, but our advantage compare to them is simplicity. We don\'t have detail content from the paper, but just basic information, which is easier for users to go over and find the paper that they are looking for instead of reading a bunch of useless paragraphs that doesn\'t related to what they want. We also rank the paper by its quality unlike Google Scholar, the detail is in the description of advanced functionality.RealnessThe data we have used in our database are from DBLP and https://aminer.org/, which we wrote a program in python that can capture all the basic information appears in these two website, such as user, venue, date, etc.Functionality (basic)Insert user or favorite paper:Insert data in the registration pageAdd paper that user select to his favorite paper listSearch Paper:Search by JournalSearch by ConferenceSearch by AuthorSearch by YearUpdate:After a user adding a paper to his list, a heart symbol will appear instead of “+” symbol, and the number next to “Cart” will update to the new number of papers that currently in user’s list. When user go to his list, he will see the paper he just added is already in the list. User can delete the paper from his list and that paper will not appear in his list.Delete:User can delete the paper from his list and that paper will not appear in his list.Functionality (advanced)1 RANKING BASED RECOMMENDATION SYSTEMThe recommendation system we plan to provided with the following feature:Get recommendation of the papers that liked by the users who also like the papers added by you.Question: Get the title of papers that liked by the users like the paper you added (e.g. your userID = \'\'12345\").SELETC paperIDFROM FavoriteWHERE userID IN(SELECT f2.userIDFROM Favorite f1, Favorite f2WHERE f1.userID = \'12345\' AND f1.userID = f2.userID);Get ranking of authors based on the number of publications. Since the DBLP data (we crawled which used in this project) doesn\'t have citation information, here we cannot conduct a PageRank algorithm, instead we do a basic ranking which is to rank the authors based on the number of publication.Calculate the overall ranking of each papers based on its authors score then print them in the ranked order.After we got the authors and their corresponding ranking score, we will calculate the ranking of each paper based on its author ranking. Then print the recommend papers in a ranked order.2 SIMILARITY MEASURE SYSTEMAdvanced recommendation - get similar authorsAbove recommendation just based on query in the database. But didn\'t involve any algorithm. Here we introduce a similarity measure called PathSim to discovery the similarity by the meta path we select. Algorithm implementation:step 1: select meta path, we plan to use A-P-V-P-A, where (A is author, P is paper, V is venue). step 2: form author author adjacency matrix based on the meta path we selectedstep 3: implement the algorithm: step 4: form a static data base of top5 most similar authors of each author, also we will set up a threshold to remove unpopular author (means rare publications).More details can be found in:Sun, Y., Han, J., Yan, X., Yu, P. S., & Wu, T. (2011). Pathsim: Meta path-based top-k similarity search in heterogeneous information networks. Proceedings of the VLDB Endowment, 4(11), 992-1003.\n',4,'Created',NULL,167),(42,'EvCoor (Event Coordinator)','\nDescription of application:- Our application will be a website for people to organize group-based events. Users will be able to create and modify events, set up groups, create projects, designate tasks, and network with other members of specified roles in order to participate. Usefulness:- It will be useful to streamline and simplify the process of searching for and gathering groups of similar skills. This will primarily be useful for Undergraduate and Graduate students who are looking to join, form, or manage teams for classes or events that they want to participate in, such as hackathons or engineering design competitions. Project management applications like Trello and Asana can help you manage a team and organize your project but are only useful once you actually have a team in place. This application will help you find the ideal team and then give you the tools to manage it.Realness:- The data will be almost all user-inputted. Users will register and be able to create and set up groups, and organize events if they have permission/clearance to do so. There will be some auxiliary data created and used by the advanced function as well, which will also probably be stored in the database.Basic Functions:- Keeps track of users and their various statistics – skills, past projects/teams, past events, friends/associates, experience level, overall rating- Users can create and maintain events, as well as specify various requirements about participation.- These events can have various effects on participating groups and users. For example, earning a notable mention from one of these events might leave a record on the group and their users. This may be listed under achievements by a user and can improve their overall rating.- Users can create groups to target these various events, and after that, users can add, modify, and remove others from their groups. Users will also be able to assign tasks to their team members and designate specific roles for team members.- The main part of the application ties into this: Users will be able to streamline this group formation process and make it easier to create well-balanced and compatible teams. For example, if a group needs a UI designer, the user will be able to search for all UI-designer-tagged users in the database. Advanced Features:Advanced Feature 1: Intelligent analysis based on gathered user and event statistics.- As users and their formed groups participate in more and more events and gather recognition, the application will be able to assign various statistics to those users in order to form and identify trends. Using those statistics, the application should be able to analyze the user\'s capabilities and compatibility in order to recommend the user into certain events, certain groups, or perhaps even to restrict a user out of certain events.- Example 1: A user has been consistently rated low by a particular group of people after working within their group. The system should recognize this and dissuade the user from joining similar groups in the future.- Example 2: A user creates an event. He will be able to specify a certain skill bracket and restrict higher-skilled users from participating in such events, in order to create a more standardized and fair competition. Advanced Feature 2: Various intricate visualizations of a user\'s statistics, so that the user can intuitively understand his own capabilities. It will be implemented in pure HTML5/JavaScript.- As we\'re gathering more and more information about a user, we would have a page where a user can see his own (or maybe others, with permission) data organized and laid out in a pleasing, easy-to-understand manner. By doing this, the application may even reveal certain traits or skills that the user would have previously been unaware of about himself.\n',4,'Created',NULL,169),(43,'BookGenie','\nDescription: We intend to create an online textbook service where students at our university can type in their class codes and find out the textbook they need for that class. Offers from other websites (UIbookstore, Amazon, eBay, Chegg and Facebook) will also be available so users can compare prices and find their best option. We will provide the URL for each offer so they can go to the website they are interested in and make purchases. Moreover, users can also put in information of the books they want to sell and make offers at our service. Prices from different dealers will also be available to help them decide how much they shall set the price.This service solves the problem students have when looking for cheaper options of textbooks. Since there is few website that has integrated resources, students always have to go to various websites and make a lot of searches to find the book they want, while worrying about whether they get the right book or edition. In order to solve this problem, our service will link the book information from the bookstore website to other dealers, and show all corresponding information in one search. Usefulness: This will be a very useful service because it solves the problem mentioned above and makes the book searching experience much easier for students. Besides, since it integrates offers from both other websites and individual sellers on Facebook, it also maximizes the chance students find an optimal deal, which will make it welcome in the user group.There is almost no similar service around based on our research. UIbookstore website offers the “compare price” function, however, there is always no result or very limited information shown for textbook searches. All other websites only provide book and price information without corresponding classes or universities related to it. So our service will be unique by combining class and textbook, and offer information. Realness: We will get our data from different book websites. On one side, we will crawl data from UI bookstore website, where we can get class and corresponding textbook information. On the other side, we will crawl data from Amazon, eBay and Chegg for related books, prices and URLs. We will also get data from Facebook textbook and exchange group (if possible) to get individual offers and their contact information. Functionality: Basic functions:(1) We will crawl data from the four sites to build a database as mentioned above.(2) Moreover, we will also allow users to enter their own data when they create accounts. The accounts will be updated with their book research and purchase history.Advanced:(1) Parsing data from the four websites to our system automatically.This will be very useful to our service because the offers at other websites or of individual sellers are constantly changing, and we want our user to have the most updated information. Also, the availability of individual offers are updating fast, so it is important for us to give them the correct information(2) Giving time recommendations and price forecasts based on the price trend in historical data.This will be cool because through the analysis of historical data, we can give users recommendations of when is the best time to make purchases and help them save money. If prices always go down after a week school starts, it will be helpful to let the users know so that they can have a better deal. \n',4,'Created',NULL,173),(44,'Open Classroom','\nDescriptionOpen Classroom will be a web application that aims to encourage students to ask questions and communicate with their professor and classmates anonymously. If a student is feeling apprehensive about raising their hand and asking questions in a large class, Open Classroom will take that apprehension away. This application will provide a platform for students to ask and vote on questions for their professor to receive during a lecture or review session. It will give professors the ability to poll students on questions, and provide data and feedback from past questions or years. UsefulnessThis application is useful because it provides an integration of the functionality of i-clicker or similar devices, as well as class forums such as piazza, but for live questioning. Our idea is different than other applications which share some functionality, because it works to provide interaction between the class and the lecturer in multiple ways, as well as making use of past data or questions to improve the class experience.RealnessThe data will be created by each class session that uses the application. The data is the questions, and the polling results. It is stored and manipulated to give the students and professor a better learning/teaching experience, and enables participation by more students.FunctionalityBasic FunctionsLogin through university account (For both student and Professor)Provide anonymity to students (among students), but not from professor. This allows the students to be more open to asking questions in class.Rating system for questions, so the best rated question can be answered by the professor. This functionality is built so that the professor doesn\'t get over whelmed by the amount of questions that they get in the class. They may change the \"question show-up\" threshold to be 3, and then only questions that get 3 other up votes will show up on the professors screen. This will also give an impetus to students to ask good questions, and for other students to up vote a question rather than asking the same questions again so the professor can get to see it on their screen.Store data by each class session. All questions for the class session are later accessible by search.Advanced FunctionsRetrieve past class sessions data from a filterable search engine. This will be made possible from having the basic functionality number 4.We will query all data that we have from previous runs of the class to see if it was asked in the previous semesters. This will save time for the professor and the student. In addition (If time permits), we intend to pull questions from previous class runs on piazza as well, to increase the amount of data we can query.Stats for in class questions. This will show things like who asked what questions. This functionality will allow the professor to see the effectiveness of questions, the rate at which various students ask questions, and how reaction/response of other students to the questions. The student response to other students questions allows the professor to gauge student understanding of the subject as well (more people up-vote a question == more people confused about the topic explained by the professor).\n',4,'Created',NULL,177),(45,'Same Campus','\na.Description Our project is to build an online platform for second-hand goods trading, house subleasing ,ride services and courses tutoring. Currently, our target users are university students. Every user needs to register by their school emails. Through our platform, users could post tasks or take tasks from others. Once you accomplish posted tasks, you will receive corresponding money reward. Similarly if your tasks are solved by other users, you need to pay a certain amount of money. Primarily we focus on following types of tasks. Ride services for students who don’t have their own cars but need rides (preferred long-distance). Tutoring services for students seeking tutors about specific courses. Proofreading for academic writing or application essay review. Second-hand goods and house subleasing trading. Via our website, each user could access resources beyond their social networks.b.UsefulnessWe think our application is useful since we realize that at most of time, people are confined by their social networks while encountering some problems. Our application provides a platform for users to break the restrictions from their own social networks and receive helps from outsides. Most prevailed social network applications don’t have any confine on their user selection. Everyone could have an account or even some of them have multiple accounts. This situations enormously decrease user’s credit standing. The difference between our program and others is that we specifically target on university students. Only school emails would be legit to sign up on our website. By this means, we could filter frauds and vicious users at large extent. Besides, we categorize the types of tasks posted on our website in order to accelerate the efficiency.c.RealnessRealness: Our data contains the personal information (username, password, email-address, sns account) of users, the information of tasks (title, type, post time, solved, user), etc that people post online. So in general the data will be primarily based on the input of our users.d.DescriptionBasic functions:Our data comes from real user inputs such as the user information and task information.When user posts a task or creates an account, we will add a tuple in the corresponding table (insert). When user edits the task or edit his/her user information, we will update the tuple in the table (update). When user deletes his/her post, the corresponding tuple will be deleted. Users can search by category or simply search the key word.Advanced functions:      1. Spam detector to filter out inappropriate tasks by some \"spam words\" with classifiers like Naive Bayes.      2. For second hand trading, we will show similar items to users using machine learning algorithms such as clustering.       3. Notify user through email if something they were looking for is on the task board according to the searching history of the user.   \n',4,'Created',NULL,181),(46,'Foodzilla','\nDescription?of an application of your choice. State as clearly as possible what you want to do. What?problem?do you solve and etc? Our app will give recommendations based on people\'s criteria: from price range to type of food, and also based on if they want to go to the restaurants they have been to or not. Another feature that we\'re gonna implement is generating random restaurants. This app is going to be useful for those people who just can\'t decide where to eat. Usefulness.? State as clearly as possible why your chosen application is useful.? Make sure to answer the following questions: Are there any similar or equivalent web sites/applications out here?? If so, what are they and how is yours different? A similar site/application is Yelp. Our application is different with Yelp because we allow users to create a list of the restaurants they have been to and let them choose which restaurant they want to go. Another feature that we\'re gonna implement is generating random restaurants.Realness.? Describe what your data is and where you will get it. Our data will be restaurants and user location. We\'re not gonna scrap data from Yelp or Google, but we\'re gonna get it from restaurant databases, e.g. Factual.Description of the functionality that you plan to offer. This is where you talk about how to meet the advanced functionality requirements.? There are two types of functions you need to offer: Basic Functions: see Stage 5 for what kind of basic functions you need to offer:        i. We will have a search function that could generate all nearby restaurants based on the user\'s selected filter.       ii. We will also have a function that could add our own favorite restaurant and then generate the user history.Advanced Functions: We will keep track of previously accessed restaurants and have users rate their experiences at those restaurants. Using that data we will adjust our suggestion algorithm based on certain criteria (The rating they gave, the specific tags that the restaurant has such as Chinese or Mexican food etc). Using this we will be able to suggest new restaurants that are based on their previous tastes and preferencesIn addition, we will allow users to log in and create an account storing their previous accessed restaurants. Furthermore, they will be able to access their own and other friend\'s accounts to accommodate for and adjust to other people\'s tastes. This would be useful for situations where you have a group of people and are unsure of what restaurant would best accommodate everyone\'s tastes. Create a page with the title \"ER Design\" on your project page and link it under Documents. In \"ER Design\", you should have the ER diagram for your application, plus descriptions in plain words on the assumptions you make. For example, \"we think that there must be only 1 adviser for each student\".For our ER Design diagram, we have concluded that we would need four main entity sets (e.g. Restaurants, Food, Customer, and History) and each of them hold its own unique attributes. Restaurants have attributes that consist of Name, Address, Phone Number, and Type. We believe that Name and Address are the two keys that could identify a uniquely identifiable entities which is Restaurants. Food have attributes that consist of Price, Name, Type, and Rating. We believe that the attribute Name is the key that could identify the entity Food. We also think that Food has a relationship of at most one to Restaurant. Meanwhile, Customer have the attributes of Email, Username, Password, Condition and Email and Username as the keys of the entity set. We think that Restaurant and Customer has the relationship of many to many since multiple customers could have the same relation to the Restaurants and vice versa. The last entity sets, History, consist of (Time and Date) and Restaurant Name.  We think that History has the relation of at most one with Customers.  \n',4,'Created',NULL,185),(47,'eBase XCHG','\nDescription of the application domain of your choice. We plan to offer a university-student based goods exchange system. This is particularly targeted at students going to graduate soon and incoming freshmen and transfer students, but is also useful for regular sales and exchanges throughout the semester too.Usefulness. A lot of students will have things they no longer want or need when they graduate. Currently, most of these students will throw these items away due to the difficulty of finding someone who would be interested in buying, while incoming students have to buy new items as it is difficult to find people selling items that they need. This creates a lot of unnecessary waste and redundant buying. With our project, we will connect sellers and buyers so both can achieve their goals. Currently, the most similar website is Craigslist. However, Craiglist is open to the general public, has no credibility, and is heavily filled with spam posts. Our website will require a .edu email or ID verification and thus is open only to the university community. And when compared against leading e-commerce and Consumer to Consumer (C2C) sites like eBay.com, our system would offer little to no service fee (compared to 13% through eBay). After deployed at various universities and gaining sufficient users we can even allow advanced trading functions like exchange across campuses/universities too.Exchange is open for services too, allowing students to put skills and service in the database: electronics repair, long distance car share (e.g. UIUC to Chicago, Purdue, IUB, etc.)Realness.  Our data is going to be mostly generated by users, people can post items they want to sell or post about items they want to buy. Data will include account info, sale posts, etc.Description of the functionality that you plan to offer.  This is where you talk about how to meet the functionality requirements.  There are two types of functions you need to offer:Basic Functions: 1.) Real data will come from user inputs like account info and user posts.2.) New users will create accounts with .edu email, generating an account in the database (username, password, account profile data). After email verification the new account will have ability to modify account profile (update/delete), post item for sale (insert), manage posts, and make offer/purchase/comment on other posts (insert/update).3.) User can search by item name/keyword, by category, and by post time. Results will be printed/displayed by date, popularity (offers & comments), and by relevance.Advanced Functions:1.) Best offer/price negotiation function with UI built in to site, allow users to send offers to buyer, and allow buyer to set a automatic threshold and accept an offer above certain price point.2.) Extract item information from user posts and crawl real time price online through e-Commerce sites like Amazon.com, BestBuy.com, Walmart.com, etc. for pricing and item specs, and display them in posting page. This reference information makes it easier for buyers when browsing through the posts. It also makes it easier for seller to set price for item.3.) Possible real time bidding function for users. Limited time bidding allows more flexibility for both buyer and sellers.\n',4,'Created',NULL,189),(48,'Vivacity','\nDescriptionOur project aims to give music recommendations to a user based on the user\'s location, their current mood, and the current weather in that location.Usefulness. A similar application is Spotify\'s \'Climatune\' application, which provides listening history based on the weather. However, the location the information is pulled from is random, and is not tuned to the user\'s own weather conditions. Also, it is not realtime, and the weather to give recommendations for must be chosen.RealnessOur data will be taken from AccuWeather or a similar weather API service. The music data may come from user\'s own libraries or from an online source. In the end we hope to use some kind of heuristic to judge what songs are appropriate for what atmospheres.Description of the functionalityOne of our advanced features will be the realtime updating of music suggestions based on changes in the weather as they happen. We think this is a unique feature since most playlists are focused on fixed sets of songs based around a theme, while our recommendation system intends to evolve as time passes.The second advanced feature will be our algorithm to determine the appropriateness of songs for certain atmospheres. This algorithm must also take into account the user\'s judgement of appropriateness of the suggested music.Basic Functions1. User can request a playlist depending on a mood or weather type. Songs will be pulled from existing music services such as Spotify.2. User can also edit their mood playlists by adding or deleting songs.3. User can also instead of putting in weather simply put in their location and we will pull weather data and generate a matching playlist for the weather at their location.4. User account functionality so that users can save their preferences and playlists.   \n',4,'Created',NULL,194),(49,'Movie Master','\nDescriptionWhen you want to go out for a movie but don’t know which one to choose, or you want to watch a certain movie but don’t know if you will like it, you can use our website to search movies by name, year and type to get the information you want and see the comments from real users. Also, when you have seen a movie and want to say something about it, you can upload some comments about it. Our website is a user-friendly platform to help users find useful information about movies and share feelings with others. Moreover, on our website, users can chat with people that are interested in the same movie in our chatroom. It will always be fun to talk to people who have same interests! You can also see all the movie theaters near you on our website to choose which one to go to. Just enjoy!Usefulness For people who like movies, it’s convenient to search information on our website. The goal of our website is to build a platform to provide useful information and a chance to share comments on movies.Description of the functionality that you plan to offerBasic functions:User login. Upload comments on movies.Delete one\'s own comments.Search for information of a specific movie, or search for all movies in a particular year, or just search movies of an interesting type.Use \'contribute\' parameter to represent the contribution of each user, the main goal of this design is to encourage users to post comments.Advanced functions:Want to talk with people who share same interest? Use our Chat Room!When a user is searching and reading comments of a particular movie, he or she can talk with other people who are viewing this movie in real time! Also, users can read the chat logs, which is about previous comments on this movie.Planning to watch movies? Find nearby cinema!Users may feel like watching a movie after reading great comments about it. Base on this phenomenon, we implement this function to show cinemas near a user\'s location. We get the latitude and longitude of a user and show nearby cinema for him.\n',4,'Created',NULL,197);
/*!40000 ALTER TABLE `Project` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ProjectBelongsToCategory`
--

DROP TABLE IF EXISTS `ProjectBelongsToCategory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ProjectBelongsToCategory` (
  `Project_Belongs_To_Category_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` int(11) DEFAULT NULL,
  `Project_Category_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Project_Belongs_To_Category_Id`),
  KEY `Project_Id` (`Project_Id`),
  KEY `Project_Category_Id` (`Project_Category_Id`),
  CONSTRAINT `ProjectBelongsToCategory_ibfk_1` FOREIGN KEY (`Project_Id`) REFERENCES `Project` (`Project_Id`) ON DELETE CASCADE,
  CONSTRAINT `ProjectBelongsToCategory_ibfk_2` FOREIGN KEY (`Project_Category_Id`) REFERENCES `ProjectCategory` (`Project_Category_Id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ProjectBelongsToCategory`
--

LOCK TABLES `ProjectBelongsToCategory` WRITE;
/*!40000 ALTER TABLE `ProjectBelongsToCategory` DISABLE KEYS */;
/*!40000 ALTER TABLE `ProjectBelongsToCategory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ProjectCategory`
--

DROP TABLE IF EXISTS `ProjectCategory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ProjectCategory` (
  `Project_Category_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Project_Category_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ProjectCategory`
--

LOCK TABLES `ProjectCategory` WRITE;
/*!40000 ALTER TABLE `ProjectCategory` DISABLE KEYS */;
/*!40000 ALTER TABLE `ProjectCategory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ProjectForClass`
--

DROP TABLE IF EXISTS `ProjectForClass`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ProjectForClass` (
  `Project_For_Class_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` int(11) DEFAULT NULL,
  `Class_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Project_For_Class_Id`),
  KEY `Project_Id` (`Project_Id`),
  KEY `Class_Id` (`Class_Id`),
  CONSTRAINT `ProjectForClass_ibfk_1` FOREIGN KEY (`Project_Id`) REFERENCES `Project` (`Project_Id`) ON DELETE CASCADE,
  CONSTRAINT `ProjectForClass_ibfk_2` FOREIGN KEY (`Class_Id`) REFERENCES `Class` (`Class_Id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ProjectForClass`
--

LOCK TABLES `ProjectForClass` WRITE;
/*!40000 ALTER TABLE `ProjectForClass` DISABLE KEYS */;
/*!40000 ALTER TABLE `ProjectForClass` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ProjectNeedsSkill`
--

DROP TABLE IF EXISTS `ProjectNeedsSkill`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ProjectNeedsSkill` (
  `Project_Needs_Skill_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` int(11) DEFAULT NULL,
  `Skill_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Project_Needs_Skill_Id`),
  KEY `Project_Id` (`Project_Id`),
  KEY `Skill_Id` (`Skill_Id`),
  CONSTRAINT `ProjectNeedsSkill_ibfk_1` FOREIGN KEY (`Project_Id`) REFERENCES `Project` (`Project_Id`) ON DELETE CASCADE,
  CONSTRAINT `ProjectNeedsSkill_ibfk_2` FOREIGN KEY (`Skill_Id`) REFERENCES `Skill` (`Skill_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=272 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ProjectNeedsSkill`
--

LOCK TABLES `ProjectNeedsSkill` WRITE;
/*!40000 ALTER TABLE `ProjectNeedsSkill` DISABLE KEYS */;
INSERT INTO `ProjectNeedsSkill` VALUES (1,1,1),(2,1,2),(3,1,3),(4,1,4),(5,1,5),(6,1,6),(7,1,7),(8,2,2),(9,2,9),(10,2,3),(11,2,4),(12,2,6),(13,2,7),(14,3,9),(15,3,3),(16,3,4),(17,3,6),(18,4,1),(19,4,2),(20,4,9),(21,4,3),(22,4,4),(23,4,6),(24,4,7),(25,5,2),(26,5,4),(27,5,5),(28,5,28),(29,5,6),(30,6,1),(31,6,2),(32,6,9),(33,6,3),(34,6,4),(35,6,6),(36,6,7),(37,7,1),(38,7,2),(39,7,9),(40,7,3),(41,7,4),(42,7,5),(43,7,6),(44,7,7),(45,8,2),(46,8,9),(47,8,3),(48,8,48),(49,8,5),(50,8,6),(51,8,7),(52,9,52),(53,9,1),(54,9,2),(55,9,3),(56,9,4),(57,9,6),(58,9,7),(59,10,1),(60,10,2),(61,10,5),(62,10,28),(63,11,2),(64,11,48),(65,11,7),(66,12,66),(67,12,67),(68,12,68),(69,12,1),(70,12,2),(71,12,9),(72,12,3),(73,12,4),(74,12,48),(75,12,5),(76,12,6),(77,13,52),(78,13,78),(79,13,2),(80,13,6),(81,14,2),(82,14,3),(83,14,4),(84,14,5),(85,14,6),(86,14,7),(87,15,87),(88,15,2),(89,15,9),(90,15,3),(91,15,4),(92,15,48),(93,15,5),(94,15,6),(95,16,2),(96,16,9),(97,16,3),(98,16,4),(99,16,5),(100,16,6),(101,17,2),(102,17,48),(103,18,52),(104,18,2),(105,18,9),(106,18,3),(107,18,4),(108,18,5),(109,18,28),(110,18,6),(111,19,1),(112,19,2),(113,19,9),(114,19,3),(115,19,4),(116,19,6),(117,19,7),(118,21,87),(119,21,68),(120,21,52),(121,21,78),(122,21,2),(123,22,87),(124,22,2),(125,22,9),(126,22,3),(127,22,4),(128,22,5),(129,22,6),(130,23,87),(131,23,48),(132,23,5),(133,24,52),(134,24,78),(135,24,2),(136,24,9),(137,24,3),(138,24,5),(139,24,28),(140,25,87),(141,25,2),(142,25,48),(143,26,68),(144,26,2),(145,26,6),(146,26,7),(147,27,2),(148,27,9),(149,27,3),(150,27,4),(151,27,5),(152,27,6),(153,27,7),(154,28,52),(155,28,78),(156,28,2),(157,28,9),(158,28,3),(159,28,4),(160,28,6),(161,28,7),(162,29,52),(163,29,2),(164,29,9),(165,29,3),(166,29,4),(167,29,6),(168,29,7),(169,30,87),(170,30,5),(171,31,87),(172,31,2),(173,31,4),(174,31,6),(175,32,87),(176,32,2),(177,32,9),(178,32,3),(179,32,48),(180,32,5),(181,33,9),(182,33,3),(183,33,4),(184,33,5),(185,33,28),(186,33,6),(187,34,1),(188,34,2),(189,34,4),(190,34,6),(191,34,7),(192,35,3),(193,35,4),(194,35,5),(195,35,6),(196,35,7),(197,36,87),(198,36,1),(199,36,2),(200,36,9),(201,36,3),(202,36,48),(203,36,5),(204,37,52),(205,37,2),(206,37,4),(207,37,6),(208,37,7),(209,38,87),(210,38,2),(211,38,4),(212,38,5),(213,38,6),(214,39,52),(215,39,78),(216,39,2),(217,39,3),(218,39,4),(219,39,6),(220,39,7),(221,40,87),(222,40,2),(223,40,9),(224,40,3),(225,40,4),(226,40,5),(227,40,6),(228,41,1),(229,41,2),(230,41,9),(231,41,3),(232,41,7),(233,42,2),(234,42,9),(235,42,3),(236,42,4),(237,42,6),(238,42,7),(239,43,1),(240,43,2),(241,43,4),(242,43,6),(243,43,7),(244,44,68),(245,44,2),(246,44,9),(247,44,3),(248,44,6),(249,44,7),(250,45,2),(251,45,4),(252,45,5),(253,45,6),(254,45,7),(255,46,68),(256,46,2),(257,46,257),(258,46,6),(259,47,2),(260,47,9),(261,47,3),(262,47,4),(263,47,6),(264,47,7),(265,49,265),(266,49,2),(267,49,9),(268,49,3),(269,49,4),(270,49,48),(271,49,6);
/*!40000 ALTER TABLE `ProjectNeedsSkill` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Room`
--

DROP TABLE IF EXISTS `Room`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Room` (
  `Room_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Room_Id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Room`
--

LOCK TABLES `Room` WRITE;
/*!40000 ALTER TABLE `Room` DISABLE KEYS */;
INSERT INTO `Room` VALUES (1,'Jian DuMatt Hubbs'),(2,'Jian DuMatt Hubbs'),(3,'Jian DuHao Wang (haow4)'),(4,'Dehua ChenDavid Wales'),(5,'Dehua ChenLukasz Borowczak'),(6,'Rate My Classroom'),(7,'Dehua ChenAndrew Bloomberg'),(8,'Engineering Master School Finder'),(9,'Foodlicious'),(10,'Housing Bubble'),(11,'TeamMatcher');
/*!40000 ALTER TABLE `Room` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `RoomMember`
--

DROP TABLE IF EXISTS `RoomMember`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `RoomMember` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Room_Id` int(11) DEFAULT NULL,
  `Student_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Room_Id` (`Room_Id`),
  KEY `Student_Id` (`Student_Id`),
  CONSTRAINT `RoomMember_ibfk_1` FOREIGN KEY (`Room_Id`) REFERENCES `Room` (`Room_Id`) ON DELETE CASCADE,
  CONSTRAINT `RoomMember_ibfk_2` FOREIGN KEY (`Student_Id`) REFERENCES `Student` (`Student_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `RoomMember`
--

LOCK TABLES `RoomMember` WRITE;
/*!40000 ALTER TABLE `RoomMember` DISABLE KEYS */;
INSERT INTO `RoomMember` VALUES (1,2,1),(2,2,2),(3,3,1),(4,3,4),(5,4,12),(6,4,11),(7,5,12),(8,5,8),(9,6,15),(10,6,16),(11,6,17),(12,6,18),(13,6,19),(14,6,20),(15,6,21),(16,6,22),(17,7,12),(18,7,15),(19,8,4),(20,8,5),(21,8,6),(22,8,7),(23,9,12),(24,9,13),(25,9,14),(26,10,31),(27,10,32),(28,10,33),(29,10,34),(30,11,74),(31,11,75),(32,11,76),(33,11,77);
/*!40000 ALTER TABLE `RoomMember` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `RoomToProject`
--

DROP TABLE IF EXISTS `RoomToProject`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `RoomToProject` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Room_Id` int(11) DEFAULT NULL,
  `Project_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `Room_Id` (`Room_Id`,`Project_Id`),
  KEY `Project_Id` (`Project_Id`),
  CONSTRAINT `RoomToProject_ibfk_1` FOREIGN KEY (`Room_Id`) REFERENCES `Room` (`Room_Id`) ON DELETE CASCADE,
  CONSTRAINT `RoomToProject_ibfk_2` FOREIGN KEY (`Project_Id`) REFERENCES `Project` (`Project_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `RoomToProject`
--

LOCK TABLES `RoomToProject` WRITE;
/*!40000 ALTER TABLE `RoomToProject` DISABLE KEYS */;
INSERT INTO `RoomToProject` VALUES (1,6,5),(2,8,2),(3,9,4),(4,10,8),(5,11,18);
/*!40000 ALTER TABLE `RoomToProject` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Skill`
--

DROP TABLE IF EXISTS `Skill`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Skill` (
  `Skill_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Skill_Id`),
  UNIQUE KEY `Name` (`Name`)
) ENGINE=InnoDB AUTO_INCREMENT=266 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Skill`
--

LOCK TABLES `Skill` WRITE;
/*!40000 ALTER TABLE `Skill` DISABLE KEYS */;
INSERT INTO `Skill` VALUES (68,'android'),(1,'cpanel'),(9,'css'),(87,'django'),(28,'flask'),(52,'git'),(78,'github'),(3,'html'),(67,'ionic'),(66,'ios'),(6,'java'),(4,'javascript'),(48,'js'),(2,'mysql'),(265,'nodejs'),(257,'perl'),(7,'php'),(5,'python');
/*!40000 ALTER TABLE `Skill` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Student`
--

DROP TABLE IF EXISTS `Student`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Student` (
  `Student_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Email` varchar(100) DEFAULT NULL,
  `Password` varchar(100) DEFAULT NULL,
  `Name` varchar(100) DEFAULT NULL,
  `School` varchar(100) DEFAULT NULL,
  `Year` int(4) DEFAULT NULL,
  `Major` varchar(100) DEFAULT NULL,
  `GPA` float(3,2) DEFAULT NULL,
  `Likes` int(11) DEFAULT NULL,
  PRIMARY KEY (`Student_Id`)
) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Student`
--

LOCK TABLES `Student` WRITE;
/*!40000 ALTER TABLE `Student` DISABLE KEYS */;
INSERT INTO `Student` VALUES (1,'Jian Du','1234','Jian Du','UIUC',3,'CS',3.00,0),(2,'Matt Hubbs','1234','Matt Hubbs','UIUC',3,'CS',3.00,0),(3,'Khushbu Vaishnav','1234','Khushbu Vaishnav','UIUC',3,'CS',3.00,0),(4,'Hao Wang (haow4)','1234','Hao Wang (haow4)','UIUC',3,'CS',3.00,0),(5,'Wang Xi (wangxi2)','1234','Wang Xi (wangxi2)','UIUC',3,'CS',3.00,0),(6,'Zixian Song (zsong11)','1234','Zixian Song (zsong11)','UIUC',3,'CS',3.00,0),(7,'Xu Yang (xuy2)','1234','Xu Yang (xuy2)','UIUC',3,'CS',3.00,0),(8,'Lukasz Borowczak','1234','Lukasz Borowczak','UIUC',3,'CS',3.00,0),(9,'Christopher Lewis','1234','Christopher Lewis','UIUC',3,'CS',3.00,0),(10,'Richard Weeks','1234','Richard Weeks','UIUC',3,'CS',3.00,0),(11,'David Wales','1234','David Wales','UIUC',3,'CS',3.00,0),(12,'Dehua Chen','1234','Dehua Chen','UIUC',3,'CS',3.00,0),(13,'Lingsong Gao','1234','Lingsong Gao','UIUC',3,'CS',3.00,0),(14,'Patrick Wang','1234','Patrick Wang','UIUC',3,'CS',3.00,0),(15,'Andrew Bloomberg','1234','Andrew Bloomberg','UIUC',3,'CS',3.00,0),(16,'bloombe2','1234','bloombe2','UIUC',3,'CS',3.00,0),(17,'Kartikey Desai','1234','Kartikey Desai','UIUC',3,'CS',3.00,0),(18,'kdesai30','1234','kdesai30','UIUC',3,'CS',3.00,0),(19,'Mrudula Vysyaraju','1234','Mrudula Vysyaraju','UIUC',3,'CS',3.00,0),(20,'vysyara2','1234','vysyara2','UIUC',3,'CS',3.00,0),(21,'Aditya Duri','1234','Aditya Duri','UIUC',3,'CS',3.00,0),(22,'duri2','1234','duri2','UIUC',3,'CS',3.00,0),(23,'Yisi Liuyisil2','1234','Yisi Liuyisil2','UIUC',3,'CS',3.00,0),(24,'Wutong Gaowutongg2','1234','Wutong Gaowutongg2','UIUC',3,'CS',3.00,0),(25,'Yingyi Zhangyingyiz2','1234','Yingyi Zhangyingyiz2','UIUC',3,'CS',3.00,0),(26,'Yi Yangyiy4','1234','Yi Yangyiy4','UIUC',3,'CS',3.00,0),(27,'Pei Liu(peiliu3)','1234','Pei Liu(peiliu3)','UIUC',3,'CS',3.00,0),(28,'Yuting Yang(yang217)','1234','Yuting Yang(yang217)','UIUC',3,'CS',3.00,0),(29,'Chujie Qin(cq2)','1234','Chujie Qin(cq2)','UIUC',3,'CS',3.00,0),(30,'Xu Li(xl2)','1234','Xu Li(xl2)','UIUC',3,'CS',3.00,0),(31,'Qingtao Hu (qhu13)','1234','Qingtao Hu (qhu13)','UIUC',3,'CS',3.00,0),(32,'Yunzhe Pan (ypan19)','1234','Yunzhe Pan (ypan19)','UIUC',3,'CS',3.00,0),(33,'Yinchen Xu (yxu72)','1234','Yinchen Xu (yxu72)','UIUC',3,'CS',3.00,0),(34,'Qixin Zhu (qzhu3)','1234','Qixin Zhu (qzhu3)','UIUC',3,'CS',3.00,0),(35,'Jiayou Sun jsun58','1234','Jiayou Sun jsun58','UIUC',3,'CS',3.00,0),(36,'Jing Zhou jzhou63','1234','Jing Zhou jzhou63','UIUC',3,'CS',3.00,0),(37,'Hao Xi haoxi2','1234','Hao Xi haoxi2','UIUC',3,'CS',3.00,0),(38,'Charles Swarts swarts2','1234','Charles Swarts swarts2','UIUC',3,'CS',3.00,0),(39,'zzaman3','1234','zzaman3','UIUC',3,'CS',3.00,0),(40,'mswisz2','1234','mswisz2','UIUC',3,'CS',3.00,0),(41,'rchang13','1234','rchang13','UIUC',3,'CS',3.00,0),(42,'jmakdah2','1234','jmakdah2','UIUC',3,'CS',3.00,0),(43,'Wanli Wang','1234','Wanli Wang','UIUC',3,'CS',3.00,0),(44,'Haoyu Wang','1234','Haoyu Wang','UIUC',3,'CS',3.00,0),(45,'Tianhao Chi','1234','Tianhao Chi','UIUC',3,'CS',3.00,0),(46,'Zhuo Li','1234','Zhuo Li','UIUC',3,'CS',3.00,0),(47,'Yang Liu','1234','Yang Liu','UIUC',3,'CS',3.00,0),(48,'Rui Xia','1234','Rui Xia','UIUC',3,'CS',3.00,0),(49,'Bo Zheng','1234','Bo Zheng','UIUC',3,'CS',3.00,0),(50,'Anqi Mao','1234','Anqi Mao','UIUC',3,'CS',3.00,0),(51,'Derek (Michael) Ferguson derekf2','1234','Derek (Michael) Ferguson derekf2','UIUC',3,'CS',3.00,0),(52,'Mike Walsh mwalsh34','1234','Mike Walsh mwalsh34','UIUC',3,'CS',3.00,0),(53,'Michael Liacopoulos liacopo2','1234','Michael Liacopoulos liacopo2','UIUC',3,'CS',3.00,0),(54,'Michael Gryk gryk2','1234','Michael Gryk gryk2','UIUC',3,'CS',3.00,0),(55,'Sahana Jain sjain46','1234','Sahana Jain sjain46','UIUC',3,'CS',3.00,0),(56,'Vimal Patel vnpatel3','1234','Vimal Patel vnpatel3','UIUC',3,'CS',3.00,0),(57,'Kharun Samuel ksamuel2','1234','Kharun Samuel ksamuel2','UIUC',3,'CS',3.00,0),(58,'Ronjoy Kalita','1234','Ronjoy Kalita','UIUC',3,'CS',3.00,0),(59,'kalita2','1234','kalita2','UIUC',3,'CS',3.00,0),(60,'Lingzhi Chu (lchu3)','1234','Lingzhi Chu (lchu3)','UIUC',3,'CS',3.00,0),(61,'Yuxuan Chen\\xa0(ychen419)','1234','Yuxuan Chen\\xa0(ychen419)','UIUC',3,'CS',3.00,0),(62,'Kedong Shao (kshao5)','1234','Kedong Shao (kshao5)','UIUC',3,'CS',3.00,0),(63,'Shuijing Liu (sliu105)','1234','Shuijing Liu (sliu105)','UIUC',3,'CS',3.00,0),(64,'Gabrielle Chen','1234','Gabrielle Chen','UIUC',3,'CS',3.00,0),(65,'gchen46','1234','gchen46','UIUC',3,'CS',3.00,0),(66,'Hong Ngai Ip','1234','Hong Ngai Ip','UIUC',3,'CS',3.00,0),(67,'Jing Rong Lim','1234','Jing Rong Lim','UIUC',3,'CS',3.00,0),(68,'jrlim3','1234','jrlim3','UIUC',3,'CS',3.00,0),(69,'Seok Hyun Song','1234','Seok Hyun Song','UIUC',3,'CS',3.00,0),(70,'Jonathan Mares','1234','Jonathan Mares','UIUC',3,'CS',3.00,0),(71,'Anthony Lu','1234','Anthony Lu','UIUC',3,'CS',3.00,0),(72,'Lloyd Ramey','1234','Lloyd Ramey','UIUC',3,'CS',3.00,0),(73,'Paul Dworzanski','1234','Paul Dworzanski','UIUC',3,'CS',3.00,0),(74,'Walter Jaskowiak(wjaskow2)','1234','Walter Jaskowiak(wjaskow2)','UIUC',3,'CS',3.00,0),(75,'Jaewoo Kim(jkim475)','1234','Jaewoo Kim(jkim475)','UIUC',3,'CS',3.00,0),(76,'Konstantin Evchenko(evchenk2)','1234','Konstantin Evchenko(evchenk2)','UIUC',3,'CS',3.00,0),(77,'Yuntae Kim(ykim157)','1234','Yuntae Kim(ykim157)','UIUC',3,'CS',3.00,0),(78,'Xuanyi Zhu','1234','Xuanyi Zhu','UIUC',3,'CS',3.00,0),(79,'Yuxi Gu','1234','Yuxi Gu','UIUC',3,'CS',3.00,0),(80,'xa0Jiaying Lin','1234','xa0Jiaying Lin','UIUC',3,'CS',3.00,0),(81,'Praniti Sinha','1234','Praniti Sinha','UIUC',3,'CS',3.00,0),(82,'Haaris Khan hkhan11','1234','Haaris Khan hkhan11','UIUC',3,'CS',3.00,0),(83,'Kunal Shah kbshah3','1234','Kunal Shah kbshah3','UIUC',3,'CS',3.00,0),(84,'Aashish Kapur askapur2','1234','Aashish Kapur askapur2','UIUC',3,'CS',3.00,0),(85,'Varun Jain vjain10','1234','Varun Jain vjain10','UIUC',3,'CS',3.00,0),(86,'Utkarsh Jha ujha2','1234','Utkarsh Jha ujha2','UIUC',3,'CS',3.00,0),(87,'Ishaan Kansal ikansal2','1234','Ishaan Kansal ikansal2','UIUC',3,'CS',3.00,0),(88,'Jaehoon Shim jshim10','1234','Jaehoon Shim jshim10','UIUC',3,'CS',3.00,0),(89,'Deekshant Kaul dkaul2','1234','Deekshant Kaul dkaul2','UIUC',3,'CS',3.00,0),(90,'Daniel Zurawski (dzuraws2)','1234','Daniel Zurawski (dzuraws2)','UIUC',3,'CS',3.00,0),(91,'Avery Clark (ahclark3)','1234','Avery Clark (ahclark3)','UIUC',3,'CS',3.00,0),(92,'Yantong Zheng (yzheng56)','1234','Yantong Zheng (yzheng56)','UIUC',3,'CS',3.00,0),(93,'Parul Agrawal (pagrawl5)','1234','Parul Agrawal (pagrawl5)','UIUC',3,'CS',3.00,0),(94,'Shicheng Zhou','1234','Shicheng Zhou','UIUC',3,'CS',3.00,0),(95,'MingKang Yang','1234','MingKang Yang','UIUC',3,'CS',3.00,0),(96,'MengQiao Zhang','1234','MengQiao Zhang','UIUC',3,'CS',3.00,0),(97,'Tiangang Chen','1234','Tiangang Chen','UIUC',3,'CS',3.00,0),(98,'Benjamin Congdon','1234','Benjamin Congdon','UIUC',3,'CS',3.00,0),(99,'Genevieve Helsel','1234','Genevieve Helsel','UIUC',3,'CS',3.00,0),(100,'Patrick Hurtado','1234','Patrick Hurtado','UIUC',3,'CS',3.00,0),(101,'Drew Zelac','1234','Drew Zelac','UIUC',3,'CS',3.00,0),(102,'Agrima Bansal','1234','Agrima Bansal','UIUC',3,'CS',3.00,0),(103,'Daniel Schwartz','1234','Daniel Schwartz','UIUC',3,'CS',3.00,0),(104,'Nodens Koren','1234','Nodens Koren','UIUC',3,'CS',3.00,0),(105,'Varun Jain','1234','Varun Jain','UIUC',3,'CS',3.00,0),(106,'Dan Volchek volchek2','1234','Dan Volchek volchek2','UIUC',3,'CS',3.00,0),(107,'Dmitriy Liokumovich liokumo2','1234','Dmitriy Liokumovich liokumo2','UIUC',3,'CS',3.00,0),(108,'George Gunter gunter1','1234','George Gunter gunter1','UIUC',3,'CS',3.00,0),(109,'Rita Liu','1234','Rita Liu','UIUC',3,'CS',3.00,0),(110,'Hao Yang','1234','Hao Yang','UIUC',3,'CS',3.00,0),(111,'Nuochen Lyu','1234','Nuochen Lyu','UIUC',3,'CS',3.00,0),(112,'Siyao Zheng','1234','Siyao Zheng','UIUC',3,'CS',3.00,0),(113,'keyez2','1234','keyez2','UIUC',3,'CS',3.00,0),(114,'rsun22','1234','rsun22','UIUC',3,'CS',3.00,0),(115,'chengd2','1234','chengd2','UIUC',3,'CS',3.00,0),(116,'yuboo2','1234','yuboo2','UIUC',3,'CS',3.00,0),(117,'Daniel Calzada','1234','Daniel Calzada','UIUC',3,'CS',3.00,0),(118,'dcalzad2','1234','dcalzad2','UIUC',3,'CS',3.00,0),(119,'Haoran Wang hwang293','1234','Haoran Wang hwang293','UIUC',3,'CS',3.00,0),(120,'Changsong Dong cd6','1234','Changsong Dong cd6','UIUC',3,'CS',3.00,0),(121,'Xiaochen Hou','1234','Xiaochen Hou','UIUC',3,'CS',3.00,0),(122,'hanke2','1234','hanke2','UIUC',3,'CS',3.00,0),(123,'katyal2','1234','katyal2','UIUC',3,'CS',3.00,0),(124,'galeks2','1234','galeks2','UIUC',3,'CS',3.00,0),(125,'tshah29','1234','tshah29','UIUC',3,'CS',3.00,0),(126,'Wenzheng Hu whu14','1234','Wenzheng Hu whu14','UIUC',3,'CS',3.00,0),(127,'Zeyu Wu','1234','Zeyu Wu','UIUC',3,'CS',3.00,0),(128,'zeyuwu2','1234','zeyuwu2','UIUC',3,'CS',3.00,0),(129,'Mingli Yang','1234','Mingli Yang','UIUC',3,'CS',3.00,0),(130,'myang46','1234','myang46','UIUC',3,'CS',3.00,0),(131,'Xilun Jin','1234','Xilun Jin','UIUC',3,'CS',3.00,0),(132,'xjin12','1234','xjin12','UIUC',3,'CS',3.00,0),(133,'Deepak Mani dmani2','1234','Deepak Mani dmani2','UIUC',3,'CS',3.00,0),(134,'Sho Harisawa harisaw2','1234','Sho Harisawa harisaw2','UIUC',3,'CS',3.00,0),(135,'Keji Chen kchen52','1234','Keji Chen kchen52','UIUC',3,'CS',3.00,0),(136,'Douglas Jennings dgjenni2','1234','Douglas Jennings dgjenni2','UIUC',3,'CS',3.00,0),(137,'Quang Dang qpdang2','1234','Quang Dang qpdang2','UIUC',3,'CS',3.00,0),(138,'Naresh Ganduri ngandu2','1234','Naresh Ganduri ngandu2','UIUC',3,'CS',3.00,0),(139,'Chris Fischer cjfisch2','1234','Chris Fischer cjfisch2','UIUC',3,'CS',3.00,0),(140,'Suyoung Park','1234','Suyoung Park','UIUC',3,'CS',3.00,0),(141,'Janak Mehta','1234','Janak Mehta','UIUC',3,'CS',3.00,0),(142,'Felipe Arias','1234','Felipe Arias','UIUC',3,'CS',3.00,0),(143,'Taiyu Dong','1234','Taiyu Dong','UIUC',3,'CS',3.00,0),(144,'Ria Nair','1234','Ria Nair','UIUC',3,'CS',3.00,0),(145,'Devashri Nagarkar','1234','Devashri Nagarkar','UIUC',3,'CS',3.00,0),(146,'Kavya Varghese','1234','Kavya Varghese','UIUC',3,'CS',3.00,0),(147,'lliu65','1234','lliu65','UIUC',3,'CS',3.00,0),(148,'kodeswa2','1234','kodeswa2','UIUC',3,'CS',3.00,0),(149,'hanjinh2','1234','hanjinh2','UIUC',3,'CS',3.00,0),(150,'sghosh12','1234','sghosh12','UIUC',3,'CS',3.00,0),(151,'Songyu Li sli111','1234','Songyu Li sli111','UIUC',3,'CS',3.00,0),(152,'Ruiqi Zhong rzhong5','1234','Ruiqi Zhong rzhong5','UIUC',3,'CS',3.00,0),(153,'Chang Xu changxu2','1234','Chang Xu changxu2','UIUC',3,'CS',3.00,0),(154,'Zongyi Wang zwang195','1234','Zongyi Wang zwang195','UIUC',3,'CS',3.00,0),(155,'Astha Saxena astha2','1234','Astha Saxena astha2','UIUC',3,'CS',3.00,0),(156,'Ram Gupta rgupta31','1234','Ram Gupta rgupta31','UIUC',3,'CS',3.00,0),(157,'Ryan Gates rgates3','1234','Ryan Gates rgates3','UIUC',3,'CS',3.00,0),(158,'Aayush Sharma asharm52','1234','Aayush Sharma asharm52','UIUC',3,'CS',3.00,0),(159,'jcokki2','1234','jcokki2','UIUC',3,'CS',3.00,0),(160,'crwllms2','1234','crwllms2','UIUC',3,'CS',3.00,0),(161,'chlopec2','1234','chlopec2','UIUC',3,'CS',3.00,0),(162,'askapur2','1234','askapur2','UIUC',3,'CS',3.00,0),(163,'Jianlin Du jdu12','1234','Jianlin Du jdu12','UIUC',3,'CS',3.00,0),(164,'Rongzi Wang rwang67','1234','Rongzi Wang rwang67','UIUC',3,'CS',3.00,0),(165,'Guoxin Huang ghuang14','1234','Guoxin Huang ghuang14','UIUC',3,'CS',3.00,0),(166,'Ruoxi Yang ryang28','1234','Ruoxi Yang ryang28','UIUC',3,'CS',3.00,0),(167,'Jing Ma','1234','Jing Ma','UIUC',3,'CS',3.00,0),(168,'Jialin Yang','1234','Jialin Yang','UIUC',3,'CS',3.00,0),(169,'Arun Abraham (atabrah2)','1234','Arun Abraham (atabrah2)','UIUC',3,'CS',3.00,0),(170,'Jun Choi (jchoi207)','1234','Jun Choi (jchoi207)','UIUC',3,'CS',3.00,0),(171,'Karan Arora (krarora2)','1234','Karan Arora (krarora2)','UIUC',3,'CS',3.00,0),(172,'Ryan Wolfe (rpwolfe2)','1234','Ryan Wolfe (rpwolfe2)','UIUC',3,'CS',3.00,0),(173,'David Levering (leverin2)','1234','David Levering (leverin2)','UIUC',3,'CS',3.00,0),(174,'Pooja Welling (pgwelli2)','1234','Pooja Welling (pgwelli2)','UIUC',3,'CS',3.00,0),(175,'Irina Zhang','1234','Irina Zhang','UIUC',3,'CS',3.00,0),(176,'yzhan198)','1234','yzhan198)','UIUC',3,'CS',3.00,0),(177,'Abdullah Motan amotan2','1234','Abdullah Motan amotan2','UIUC',3,'CS',3.00,0),(178,'Seth Primack sprimac2','1234','Seth Primack sprimac2','UIUC',3,'CS',3.00,0),(179,'Shimul Chaudhary chadhry4','1234','Shimul Chaudhary chadhry4','UIUC',3,'CS',3.00,0),(180,'Jose Morales Valenzuela jmoral39','1234','Jose Morales Valenzuela jmoral39','UIUC',3,'CS',3.00,0),(181,'Ningkai Wu nwu10','1234','Ningkai Wu nwu10','UIUC',3,'CS',3.00,0),(182,'Ziyang Liu zliu63','1234','Ziyang Liu zliu63','UIUC',3,'CS',3.00,0),(183,'Yanda Hu yandahu2','1234','Yanda Hu yandahu2','UIUC',3,'CS',3.00,0),(184,'Naijing Zhang nzhang31','1234','Naijing Zhang nzhang31','UIUC',3,'CS',3.00,0),(185,'Lina Sie linasie2','1234','Lina Sie linasie2','UIUC',3,'CS',3.00,0),(186,'Drew Pilgrim pilgrim2','1234','Drew Pilgrim pilgrim2','UIUC',3,'CS',3.00,0),(187,'Enkh-Ider Jargalsaikhan jargals2','1234','Enkh-Ider Jargalsaikhan jargals2','UIUC',3,'CS',3.00,0),(188,'Aldo Sanjoto sanjoto2','1234','Aldo Sanjoto sanjoto2','UIUC',3,'CS',3.00,0),(189,'Shuodong Zhang szhang84','1234','Shuodong Zhang szhang84','UIUC',3,'CS',3.00,0),(190,'Xinyi Wu','1234','Xinyi Wu','UIUC',3,'CS',3.00,0),(191,'xinyiwu2','1234','xinyiwu2','UIUC',3,'CS',3.00,0),(192,'Wenjie Zhu wzhu26','1234','Wenjie Zhu wzhu26','UIUC',3,'CS',3.00,0),(193,'Mickey Zhang rzhang56','1234','Mickey Zhang rzhang56','UIUC',3,'CS',3.00,0),(194,'Elliott Rodriguezedrodri2','1234','Elliott Rodriguezedrodri2','UIUC',3,'CS',3.00,0),(195,'Tarandeep Saggu','1234','Tarandeep Saggu','UIUC',3,'CS',3.00,0),(196,'Ian Pickering ipicker2','1234','Ian Pickering ipicker2','UIUC',3,'CS',3.00,0),(197,'Caiwei He (caiweih2)','1234','Caiwei He (caiweih2)','UIUC',3,'CS',3.00,0),(198,'Yujuan zhang(yujuanz2)','1234','Yujuan zhang(yujuanz2)','UIUC',3,'CS',3.00,0),(199,'Jiefei Shi(jiefeis2)','1234','Jiefei Shi(jiefeis2)','UIUC',3,'CS',3.00,0);
/*!40000 ALTER TABLE `Student` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `StudentEnrolledInClass`
--

DROP TABLE IF EXISTS `StudentEnrolledInClass`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `StudentEnrolledInClass` (
  `Student_Enrolled_In_Class_Id` int(11) NOT NULL,
  `Student_Id` int(11) DEFAULT NULL,
  `Class_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Student_Enrolled_In_Class_Id`),
  KEY `Student_Id` (`Student_Id`),
  KEY `Class_Id` (`Class_Id`),
  CONSTRAINT `StudentEnrolledInClass_ibfk_1` FOREIGN KEY (`Student_Id`) REFERENCES `Student` (`Student_Id`) ON DELETE CASCADE,
  CONSTRAINT `StudentEnrolledInClass_ibfk_2` FOREIGN KEY (`Class_Id`) REFERENCES `Class` (`Class_Id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `StudentEnrolledInClass`
--

LOCK TABLES `StudentEnrolledInClass` WRITE;
/*!40000 ALTER TABLE `StudentEnrolledInClass` DISABLE KEYS */;
/*!40000 ALTER TABLE `StudentEnrolledInClass` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `StudentHasSkill`
--

DROP TABLE IF EXISTS `StudentHasSkill`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `StudentHasSkill` (
  `Student_Has_Skill_Id` int(11) NOT NULL AUTO_INCREMENT,
  `Skill_Level` int(11) DEFAULT NULL,
  `Student_Id` int(11) DEFAULT NULL,
  `Skill_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Student_Has_Skill_Id`),
  KEY `Student_Id` (`Student_Id`),
  KEY `Skill_Id` (`Skill_Id`),
  CONSTRAINT `StudentHasSkill_ibfk_1` FOREIGN KEY (`Student_Id`) REFERENCES `Student` (`Student_Id`) ON DELETE CASCADE,
  CONSTRAINT `StudentHasSkill_ibfk_2` FOREIGN KEY (`Skill_Id`) REFERENCES `Skill` (`Skill_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1102 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `StudentHasSkill`
--

LOCK TABLES `StudentHasSkill` WRITE;
/*!40000 ALTER TABLE `StudentHasSkill` DISABLE KEYS */;
INSERT INTO `StudentHasSkill` VALUES (1,2,1,1),(2,2,1,2),(3,2,1,3),(4,2,1,4),(5,2,1,5),(6,2,1,6),(7,2,1,7),(8,2,2,1),(9,2,2,2),(10,2,2,3),(11,2,2,4),(12,2,2,5),(13,2,2,6),(14,2,2,7),(15,2,3,1),(16,2,3,2),(17,2,3,3),(18,2,3,4),(19,2,3,5),(20,2,3,6),(21,2,3,7),(22,2,4,2),(23,2,4,9),(24,2,4,3),(25,2,4,4),(26,2,4,6),(27,2,4,7),(28,2,5,2),(29,2,5,9),(30,2,5,3),(31,2,5,4),(32,2,5,6),(33,2,5,7),(34,2,6,2),(35,2,6,9),(36,2,6,3),(37,2,6,4),(38,2,6,6),(39,2,6,7),(40,2,7,2),(41,2,7,9),(42,2,7,3),(43,2,7,4),(44,2,7,6),(45,2,7,7),(46,2,8,9),(47,2,8,3),(48,2,8,4),(49,2,8,6),(50,2,9,9),(51,2,9,3),(52,2,9,4),(53,2,9,6),(54,2,10,9),(55,2,10,3),(56,2,10,4),(57,2,10,6),(58,2,11,9),(59,2,11,3),(60,2,11,4),(61,2,11,6),(62,2,12,1),(63,2,12,2),(64,2,12,9),(65,2,12,3),(66,2,12,4),(67,2,12,6),(68,2,12,7),(69,2,13,1),(70,2,13,2),(71,2,13,9),(72,2,13,3),(73,2,13,4),(74,2,13,6),(75,2,13,7),(76,2,14,1),(77,2,14,2),(78,2,14,9),(79,2,14,3),(80,2,14,4),(81,2,14,6),(82,2,14,7),(83,2,15,2),(84,2,15,4),(85,2,15,5),(86,2,15,28),(87,2,15,6),(88,2,16,2),(89,2,16,4),(90,2,16,5),(91,2,16,28),(92,2,16,6),(93,2,17,2),(94,2,17,4),(95,2,17,5),(96,2,17,28),(97,2,17,6),(98,2,18,2),(99,2,18,4),(100,2,18,5),(101,2,18,28),(102,2,18,6),(103,2,19,2),(104,2,19,4),(105,2,19,5),(106,2,19,28),(107,2,19,6),(108,2,20,2),(109,2,20,4),(110,2,20,5),(111,2,20,28),(112,2,20,6),(113,2,21,2),(114,2,21,4),(115,2,21,5),(116,2,21,28),(117,2,21,6),(118,2,22,2),(119,2,22,4),(120,2,22,5),(121,2,22,28),(122,2,22,6),(123,2,23,1),(124,2,23,2),(125,2,23,9),(126,2,23,3),(127,2,23,4),(128,2,23,6),(129,2,23,7),(130,2,24,1),(131,2,24,2),(132,2,24,9),(133,2,24,3),(134,2,24,4),(135,2,24,6),(136,2,24,7),(137,2,25,1),(138,2,25,2),(139,2,25,9),(140,2,25,3),(141,2,25,4),(142,2,25,6),(143,2,25,7),(144,2,26,1),(145,2,26,2),(146,2,26,9),(147,2,26,3),(148,2,26,4),(149,2,26,6),(150,2,26,7),(151,2,27,1),(152,2,27,2),(153,2,27,9),(154,2,27,3),(155,2,27,4),(156,2,27,5),(157,2,27,6),(158,2,27,7),(159,2,28,1),(160,2,28,2),(161,2,28,9),(162,2,28,3),(163,2,28,4),(164,2,28,5),(165,2,28,6),(166,2,28,7),(167,2,29,1),(168,2,29,2),(169,2,29,9),(170,2,29,3),(171,2,29,4),(172,2,29,5),(173,2,29,6),(174,2,29,7),(175,2,30,1),(176,2,30,2),(177,2,30,9),(178,2,30,3),(179,2,30,4),(180,2,30,5),(181,2,30,6),(182,2,30,7),(183,2,31,2),(184,2,31,9),(185,2,31,3),(186,2,31,48),(187,2,31,5),(188,2,31,6),(189,2,31,7),(190,2,32,2),(191,2,32,9),(192,2,32,3),(193,2,32,48),(194,2,32,5),(195,2,32,6),(196,2,32,7),(197,2,33,2),(198,2,33,9),(199,2,33,3),(200,2,33,48),(201,2,33,5),(202,2,33,6),(203,2,33,7),(204,2,34,2),(205,2,34,9),(206,2,34,3),(207,2,34,48),(208,2,34,5),(209,2,34,6),(210,2,34,7),(211,2,35,52),(212,2,35,1),(213,2,35,2),(214,2,35,3),(215,2,35,4),(216,2,35,6),(217,2,35,7),(218,2,36,52),(219,2,36,1),(220,2,36,2),(221,2,36,3),(222,2,36,4),(223,2,36,6),(224,2,36,7),(225,2,37,52),(226,2,37,1),(227,2,37,2),(228,2,37,3),(229,2,37,4),(230,2,37,6),(231,2,37,7),(232,2,38,52),(233,2,38,1),(234,2,38,2),(235,2,38,3),(236,2,38,4),(237,2,38,6),(238,2,38,7),(239,2,39,1),(240,2,39,2),(241,2,39,5),(242,2,39,28),(243,2,40,1),(244,2,40,2),(245,2,40,5),(246,2,40,28),(247,2,41,1),(248,2,41,2),(249,2,41,5),(250,2,41,28),(251,2,42,1),(252,2,42,2),(253,2,42,5),(254,2,42,28),(255,2,43,2),(256,2,43,48),(257,2,43,7),(258,2,44,2),(259,2,44,48),(260,2,44,7),(261,2,45,2),(262,2,45,48),(263,2,45,7),(264,2,46,2),(265,2,46,48),(266,2,46,7),(267,2,47,66),(268,2,47,67),(269,2,47,68),(270,2,47,1),(271,2,47,2),(272,2,47,9),(273,2,47,3),(274,2,47,4),(275,2,47,48),(276,2,47,5),(277,2,47,6),(278,2,48,66),(279,2,48,67),(280,2,48,68),(281,2,48,1),(282,2,48,2),(283,2,48,9),(284,2,48,3),(285,2,48,4),(286,2,48,48),(287,2,48,5),(288,2,48,6),(289,2,49,66),(290,2,49,67),(291,2,49,68),(292,2,49,1),(293,2,49,2),(294,2,49,9),(295,2,49,3),(296,2,49,4),(297,2,49,48),(298,2,49,5),(299,2,49,6),(300,2,50,66),(301,2,50,67),(302,2,50,68),(303,2,50,1),(304,2,50,2),(305,2,50,9),(306,2,50,3),(307,2,50,4),(308,2,50,48),(309,2,50,5),(310,2,50,6),(311,2,51,52),(312,2,51,78),(313,2,51,2),(314,2,51,6),(315,2,52,52),(316,2,52,78),(317,2,52,2),(318,2,52,6),(319,2,53,52),(320,2,53,78),(321,2,53,2),(322,2,53,6),(323,2,54,52),(324,2,54,78),(325,2,54,2),(326,2,54,6),(327,2,55,2),(328,2,55,3),(329,2,55,4),(330,2,55,5),(331,2,55,6),(332,2,55,7),(333,2,56,2),(334,2,56,3),(335,2,56,4),(336,2,56,5),(337,2,56,6),(338,2,56,7),(339,2,57,2),(340,2,57,3),(341,2,57,4),(342,2,57,5),(343,2,57,6),(344,2,57,7),(345,2,58,2),(346,2,58,3),(347,2,58,4),(348,2,58,5),(349,2,58,6),(350,2,58,7),(351,2,59,2),(352,2,59,3),(353,2,59,4),(354,2,59,5),(355,2,59,6),(356,2,59,7),(357,2,60,87),(358,2,60,2),(359,2,60,9),(360,2,60,3),(361,2,60,4),(362,2,60,48),(363,2,60,5),(364,2,60,6),(365,2,61,87),(366,2,61,2),(367,2,61,9),(368,2,61,3),(369,2,61,4),(370,2,61,48),(371,2,61,5),(372,2,61,6),(373,2,62,87),(374,2,62,2),(375,2,62,9),(376,2,62,3),(377,2,62,4),(378,2,62,48),(379,2,62,5),(380,2,62,6),(381,2,63,87),(382,2,63,2),(383,2,63,9),(384,2,63,3),(385,2,63,4),(386,2,63,48),(387,2,63,5),(388,2,63,6),(389,2,64,2),(390,2,64,9),(391,2,64,3),(392,2,64,4),(393,2,64,5),(394,2,64,6),(395,2,65,2),(396,2,65,9),(397,2,65,3),(398,2,65,4),(399,2,65,5),(400,2,65,6),(401,2,66,2),(402,2,66,9),(403,2,66,3),(404,2,66,4),(405,2,66,5),(406,2,66,6),(407,2,67,2),(408,2,67,9),(409,2,67,3),(410,2,67,4),(411,2,67,5),(412,2,67,6),(413,2,68,2),(414,2,68,9),(415,2,68,3),(416,2,68,4),(417,2,68,5),(418,2,68,6),(419,2,69,2),(420,2,69,9),(421,2,69,3),(422,2,69,4),(423,2,69,5),(424,2,69,6),(425,2,70,2),(426,2,70,48),(427,2,71,2),(428,2,71,48),(429,2,72,2),(430,2,72,48),(431,2,73,2),(432,2,73,48),(433,2,74,52),(434,2,74,2),(435,2,74,9),(436,2,74,3),(437,2,74,4),(438,2,74,5),(439,2,74,28),(440,2,74,6),(441,2,75,52),(442,2,75,2),(443,2,75,9),(444,2,75,3),(445,2,75,4),(446,2,75,5),(447,2,75,28),(448,2,75,6),(449,2,76,52),(450,2,76,2),(451,2,76,9),(452,2,76,3),(453,2,76,4),(454,2,76,5),(455,2,76,28),(456,2,76,6),(457,2,77,52),(458,2,77,2),(459,2,77,9),(460,2,77,3),(461,2,77,4),(462,2,77,5),(463,2,77,28),(464,2,77,6),(465,2,78,1),(466,2,78,2),(467,2,78,9),(468,2,78,3),(469,2,78,4),(470,2,78,6),(471,2,78,7),(472,2,79,1),(473,2,79,2),(474,2,79,9),(475,2,79,3),(476,2,79,4),(477,2,79,6),(478,2,79,7),(479,2,80,1),(480,2,80,2),(481,2,80,9),(482,2,80,3),(483,2,80,4),(484,2,80,6),(485,2,80,7),(486,2,81,1),(487,2,81,2),(488,2,81,9),(489,2,81,3),(490,2,81,4),(491,2,81,6),(492,2,81,7),(493,2,86,87),(494,2,86,68),(495,2,86,52),(496,2,86,78),(497,2,86,2),(498,2,87,87),(499,2,87,68),(500,2,87,52),(501,2,87,78),(502,2,87,2),(503,2,88,87),(504,2,88,68),(505,2,88,52),(506,2,88,78),(507,2,88,2),(508,2,89,87),(509,2,89,68),(510,2,89,52),(511,2,89,78),(512,2,89,2),(513,2,90,87),(514,2,90,2),(515,2,90,9),(516,2,90,3),(517,2,90,4),(518,2,90,5),(519,2,90,6),(520,2,91,87),(521,2,91,2),(522,2,91,9),(523,2,91,3),(524,2,91,4),(525,2,91,5),(526,2,91,6),(527,2,92,87),(528,2,92,2),(529,2,92,9),(530,2,92,3),(531,2,92,4),(532,2,92,5),(533,2,92,6),(534,2,93,87),(535,2,93,2),(536,2,93,9),(537,2,93,3),(538,2,93,4),(539,2,93,5),(540,2,93,6),(541,2,94,87),(542,2,94,48),(543,2,94,5),(544,2,95,87),(545,2,95,48),(546,2,95,5),(547,2,96,87),(548,2,96,48),(549,2,96,5),(550,2,97,87),(551,2,97,48),(552,2,97,5),(553,2,98,52),(554,2,98,78),(555,2,98,2),(556,2,98,9),(557,2,98,3),(558,2,98,5),(559,2,98,28),(560,2,99,52),(561,2,99,78),(562,2,99,2),(563,2,99,9),(564,2,99,3),(565,2,99,5),(566,2,99,28),(567,2,100,52),(568,2,100,78),(569,2,100,2),(570,2,100,9),(571,2,100,3),(572,2,100,5),(573,2,100,28),(574,2,101,52),(575,2,101,78),(576,2,101,2),(577,2,101,9),(578,2,101,3),(579,2,101,5),(580,2,101,28),(581,2,102,87),(582,2,102,2),(583,2,102,48),(584,2,103,87),(585,2,103,2),(586,2,103,48),(587,2,104,87),(588,2,104,2),(589,2,104,48),(590,2,105,87),(591,2,105,2),(592,2,105,48),(593,2,106,68),(594,2,106,2),(595,2,106,6),(596,2,106,7),(597,2,107,68),(598,2,107,2),(599,2,107,6),(600,2,107,7),(601,2,108,68),(602,2,108,2),(603,2,108,6),(604,2,108,7),(605,2,109,2),(606,2,109,9),(607,2,109,3),(608,2,109,4),(609,2,109,5),(610,2,109,6),(611,2,109,7),(612,2,110,2),(613,2,110,9),(614,2,110,3),(615,2,110,4),(616,2,110,5),(617,2,110,6),(618,2,110,7),(619,2,111,2),(620,2,111,9),(621,2,111,3),(622,2,111,4),(623,2,111,5),(624,2,111,6),(625,2,111,7),(626,2,112,2),(627,2,112,9),(628,2,112,3),(629,2,112,4),(630,2,112,5),(631,2,112,6),(632,2,112,7),(633,2,113,52),(634,2,113,78),(635,2,113,2),(636,2,113,9),(637,2,113,3),(638,2,113,4),(639,2,113,6),(640,2,113,7),(641,2,114,52),(642,2,114,78),(643,2,114,2),(644,2,114,9),(645,2,114,3),(646,2,114,4),(647,2,114,6),(648,2,114,7),(649,2,115,52),(650,2,115,78),(651,2,115,2),(652,2,115,9),(653,2,115,3),(654,2,115,4),(655,2,115,6),(656,2,115,7),(657,2,116,52),(658,2,116,78),(659,2,116,2),(660,2,116,9),(661,2,116,3),(662,2,116,4),(663,2,116,6),(664,2,116,7),(665,2,117,52),(666,2,117,2),(667,2,117,9),(668,2,117,3),(669,2,117,4),(670,2,117,6),(671,2,117,7),(672,2,118,52),(673,2,118,2),(674,2,118,9),(675,2,118,3),(676,2,118,4),(677,2,118,6),(678,2,118,7),(679,2,119,52),(680,2,119,2),(681,2,119,9),(682,2,119,3),(683,2,119,4),(684,2,119,6),(685,2,119,7),(686,2,120,52),(687,2,120,2),(688,2,120,9),(689,2,120,3),(690,2,120,4),(691,2,120,6),(692,2,120,7),(693,2,121,52),(694,2,121,2),(695,2,121,9),(696,2,121,3),(697,2,121,4),(698,2,121,6),(699,2,121,7),(700,2,122,87),(701,2,122,5),(702,2,123,87),(703,2,123,5),(704,2,124,87),(705,2,124,5),(706,2,125,87),(707,2,125,5),(708,2,126,87),(709,2,126,2),(710,2,126,4),(711,2,126,6),(712,2,127,87),(713,2,127,2),(714,2,127,4),(715,2,127,6),(716,2,128,87),(717,2,128,2),(718,2,128,4),(719,2,128,6),(720,2,129,87),(721,2,129,2),(722,2,129,4),(723,2,129,6),(724,2,130,87),(725,2,130,2),(726,2,130,4),(727,2,130,6),(728,2,131,87),(729,2,131,2),(730,2,131,4),(731,2,131,6),(732,2,132,87),(733,2,132,2),(734,2,132,4),(735,2,132,6),(736,2,133,87),(737,2,133,2),(738,2,133,9),(739,2,133,3),(740,2,133,48),(741,2,133,5),(742,2,134,87),(743,2,134,2),(744,2,134,9),(745,2,134,3),(746,2,134,48),(747,2,134,5),(748,2,135,87),(749,2,135,2),(750,2,135,9),(751,2,135,3),(752,2,135,48),(753,2,135,5),(754,2,136,9),(755,2,136,3),(756,2,136,4),(757,2,136,5),(758,2,136,28),(759,2,136,6),(760,2,137,9),(761,2,137,3),(762,2,137,4),(763,2,137,5),(764,2,137,28),(765,2,137,6),(766,2,138,9),(767,2,138,3),(768,2,138,4),(769,2,138,5),(770,2,138,28),(771,2,138,6),(772,2,139,9),(773,2,139,3),(774,2,139,4),(775,2,139,5),(776,2,139,28),(777,2,139,6),(778,2,140,1),(779,2,140,2),(780,2,140,4),(781,2,140,6),(782,2,140,7),(783,2,141,1),(784,2,141,2),(785,2,141,4),(786,2,141,6),(787,2,141,7),(788,2,142,1),(789,2,142,2),(790,2,142,4),(791,2,142,6),(792,2,142,7),(793,2,143,1),(794,2,143,2),(795,2,143,4),(796,2,143,6),(797,2,143,7),(798,2,144,3),(799,2,144,4),(800,2,144,5),(801,2,144,6),(802,2,144,7),(803,2,145,3),(804,2,145,4),(805,2,145,5),(806,2,145,6),(807,2,145,7),(808,2,146,3),(809,2,146,4),(810,2,146,5),(811,2,146,6),(812,2,146,7),(813,2,147,87),(814,2,147,1),(815,2,147,2),(816,2,147,9),(817,2,147,3),(818,2,147,48),(819,2,147,5),(820,2,148,87),(821,2,148,1),(822,2,148,2),(823,2,148,9),(824,2,148,3),(825,2,148,48),(826,2,148,5),(827,2,149,87),(828,2,149,1),(829,2,149,2),(830,2,149,9),(831,2,149,3),(832,2,149,48),(833,2,149,5),(834,2,150,87),(835,2,150,1),(836,2,150,2),(837,2,150,9),(838,2,150,3),(839,2,150,48),(840,2,150,5),(841,2,151,52),(842,2,151,2),(843,2,151,4),(844,2,151,6),(845,2,151,7),(846,2,152,52),(847,2,152,2),(848,2,152,4),(849,2,152,6),(850,2,152,7),(851,2,153,52),(852,2,153,2),(853,2,153,4),(854,2,153,6),(855,2,153,7),(856,2,154,52),(857,2,154,2),(858,2,154,4),(859,2,154,6),(860,2,154,7),(861,2,155,87),(862,2,155,2),(863,2,155,4),(864,2,155,5),(865,2,155,6),(866,2,156,87),(867,2,156,2),(868,2,156,4),(869,2,156,5),(870,2,156,6),(871,2,157,87),(872,2,157,2),(873,2,157,4),(874,2,157,5),(875,2,157,6),(876,2,158,87),(877,2,158,2),(878,2,158,4),(879,2,158,5),(880,2,158,6),(881,2,159,52),(882,2,159,78),(883,2,159,2),(884,2,159,3),(885,2,159,4),(886,2,159,6),(887,2,159,7),(888,2,160,52),(889,2,160,78),(890,2,160,2),(891,2,160,3),(892,2,160,4),(893,2,160,6),(894,2,160,7),(895,2,161,52),(896,2,161,78),(897,2,161,2),(898,2,161,3),(899,2,161,4),(900,2,161,6),(901,2,161,7),(902,2,162,52),(903,2,162,78),(904,2,162,2),(905,2,162,3),(906,2,162,4),(907,2,162,6),(908,2,162,7),(909,2,163,87),(910,2,163,2),(911,2,163,9),(912,2,163,3),(913,2,163,4),(914,2,163,5),(915,2,163,6),(916,2,164,87),(917,2,164,2),(918,2,164,9),(919,2,164,3),(920,2,164,4),(921,2,164,5),(922,2,164,6),(923,2,165,87),(924,2,165,2),(925,2,165,9),(926,2,165,3),(927,2,165,4),(928,2,165,5),(929,2,165,6),(930,2,166,87),(931,2,166,2),(932,2,166,9),(933,2,166,3),(934,2,166,4),(935,2,166,5),(936,2,166,6),(937,2,167,1),(938,2,167,2),(939,2,167,9),(940,2,167,3),(941,2,167,7),(942,2,168,1),(943,2,168,2),(944,2,168,9),(945,2,168,3),(946,2,168,7),(947,2,169,2),(948,2,169,9),(949,2,169,3),(950,2,169,4),(951,2,169,6),(952,2,169,7),(953,2,170,2),(954,2,170,9),(955,2,170,3),(956,2,170,4),(957,2,170,6),(958,2,170,7),(959,2,171,2),(960,2,171,9),(961,2,171,3),(962,2,171,4),(963,2,171,6),(964,2,171,7),(965,2,172,2),(966,2,172,9),(967,2,172,3),(968,2,172,4),(969,2,172,6),(970,2,172,7),(971,2,173,1),(972,2,173,2),(973,2,173,4),(974,2,173,6),(975,2,173,7),(976,2,174,1),(977,2,174,2),(978,2,174,4),(979,2,174,6),(980,2,174,7),(981,2,175,1),(982,2,175,2),(983,2,175,4),(984,2,175,6),(985,2,175,7),(986,2,176,1),(987,2,176,2),(988,2,176,4),(989,2,176,6),(990,2,176,7),(991,2,177,68),(992,2,177,2),(993,2,177,9),(994,2,177,3),(995,2,177,6),(996,2,177,7),(997,2,178,68),(998,2,178,2),(999,2,178,9),(1000,2,178,3),(1001,2,178,6),(1002,2,178,7),(1003,2,179,68),(1004,2,179,2),(1005,2,179,9),(1006,2,179,3),(1007,2,179,6),(1008,2,179,7),(1009,2,180,68),(1010,2,180,2),(1011,2,180,9),(1012,2,180,3),(1013,2,180,6),(1014,2,180,7),(1015,2,181,2),(1016,2,181,4),(1017,2,181,5),(1018,2,181,6),(1019,2,181,7),(1020,2,182,2),(1021,2,182,4),(1022,2,182,5),(1023,2,182,6),(1024,2,182,7),(1025,2,183,2),(1026,2,183,4),(1027,2,183,5),(1028,2,183,6),(1029,2,183,7),(1030,2,184,2),(1031,2,184,4),(1032,2,184,5),(1033,2,184,6),(1034,2,184,7),(1035,2,185,68),(1036,2,185,2),(1037,2,185,257),(1038,2,185,6),(1039,2,186,68),(1040,2,186,2),(1041,2,186,257),(1042,2,186,6),(1043,2,187,68),(1044,2,187,2),(1045,2,187,257),(1046,2,187,6),(1047,2,188,68),(1048,2,188,2),(1049,2,188,257),(1050,2,188,6),(1051,2,189,2),(1052,2,189,9),(1053,2,189,3),(1054,2,189,4),(1055,2,189,6),(1056,2,189,7),(1057,2,190,2),(1058,2,190,9),(1059,2,190,3),(1060,2,190,4),(1061,2,190,6),(1062,2,190,7),(1063,2,191,2),(1064,2,191,9),(1065,2,191,3),(1066,2,191,4),(1067,2,191,6),(1068,2,191,7),(1069,2,192,2),(1070,2,192,9),(1071,2,192,3),(1072,2,192,4),(1073,2,192,6),(1074,2,192,7),(1075,2,193,2),(1076,2,193,9),(1077,2,193,3),(1078,2,193,4),(1079,2,193,6),(1080,2,193,7),(1081,2,197,265),(1082,2,197,2),(1083,2,197,9),(1084,2,197,3),(1085,2,197,4),(1086,2,197,48),(1087,2,197,6),(1088,2,198,265),(1089,2,198,2),(1090,2,198,9),(1091,2,198,3),(1092,2,198,4),(1093,2,198,48),(1094,2,198,6),(1095,2,199,265),(1096,2,199,2),(1097,2,199,9),(1098,2,199,3),(1099,2,199,4),(1100,2,199,48),(1101,2,199,6);
/*!40000 ALTER TABLE `StudentHasSkill` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `StudentPartOfProject`
--

DROP TABLE IF EXISTS `StudentPartOfProject`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `StudentPartOfProject` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Student_Id` int(11) DEFAULT NULL,
  `Project_Id` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Student_Id` (`Student_Id`),
  KEY `Project_Id` (`Project_Id`),
  CONSTRAINT `StudentPartOfProject_ibfk_1` FOREIGN KEY (`Student_Id`) REFERENCES `Student` (`Student_Id`) ON DELETE CASCADE,
  CONSTRAINT `StudentPartOfProject_ibfk_2` FOREIGN KEY (`Project_Id`) REFERENCES `Project` (`Project_Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `StudentPartOfProject`
--

LOCK TABLES `StudentPartOfProject` WRITE;
/*!40000 ALTER TABLE `StudentPartOfProject` DISABLE KEYS */;
INSERT INTO `StudentPartOfProject` VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,2),(5,5,2),(6,6,2),(7,7,2),(8,8,3),(9,9,3),(10,10,3),(11,11,3),(12,12,4),(13,13,4),(14,14,4),(15,15,5),(16,16,5),(17,17,5),(18,18,5),(19,19,5),(20,20,5),(21,21,5),(22,22,5),(23,23,6),(24,24,6),(25,25,6),(26,26,6),(27,27,7),(28,28,7),(29,29,7),(30,30,7),(31,31,8),(32,32,8),(33,33,8),(34,34,8),(35,35,9),(36,36,9),(37,37,9),(38,38,9),(39,39,10),(40,40,10),(41,41,10),(42,42,10),(43,43,11),(44,44,11),(45,45,11),(46,46,11),(47,47,12),(48,48,12),(49,49,12),(50,50,12),(51,51,13),(52,52,13),(53,53,13),(54,54,13),(55,55,14),(56,56,14),(57,57,14),(58,58,14),(59,59,14),(60,60,15),(61,61,15),(62,62,15),(63,63,15),(64,64,16),(65,65,16),(66,66,16),(67,67,16),(68,68,16),(69,69,16),(70,70,17),(71,71,17),(72,72,17),(73,73,17),(74,74,18),(75,75,18),(76,76,18),(77,77,18),(78,78,19),(79,79,19),(80,80,19),(81,81,19),(82,82,20),(83,83,20),(84,84,20),(85,85,20),(86,86,21),(87,87,21),(88,88,21),(89,89,21),(90,90,22),(91,91,22),(92,92,22),(93,93,22),(94,94,23),(95,95,23),(96,96,23),(97,97,23),(98,98,24),(99,99,24),(100,100,24),(101,101,24),(102,102,25),(103,103,25),(104,104,25),(105,105,25),(106,106,26),(107,107,26),(108,108,26),(109,109,27),(110,110,27),(111,111,27),(112,112,27),(113,113,28),(114,114,28),(115,115,28),(116,116,28),(117,117,29),(118,118,29),(119,119,29),(120,120,29),(121,121,29),(122,122,30),(123,123,30),(124,124,30),(125,125,30),(126,126,31),(127,127,31),(128,128,31),(129,129,31),(130,130,31),(131,131,31),(132,132,31),(133,133,32),(134,134,32),(135,135,32),(136,136,33),(137,137,33),(138,138,33),(139,139,33),(140,140,34),(141,141,34),(142,142,34),(143,143,34),(144,144,35),(145,145,35),(146,146,35),(147,147,36),(148,148,36),(149,149,36),(150,150,36),(151,151,37),(152,152,37),(153,153,37),(154,154,37),(155,155,38),(156,156,38),(157,157,38),(158,158,38),(159,159,39),(160,160,39),(161,161,39),(162,162,39),(163,163,40),(164,164,40),(165,165,40),(166,166,40),(167,167,41),(168,168,41),(169,169,42),(170,170,42),(171,171,42),(172,172,42),(173,173,43),(174,174,43),(175,175,43),(176,176,43),(177,177,44),(178,178,44),(179,179,44),(180,180,44),(181,181,45),(182,182,45),(183,183,45),(184,184,45),(185,185,46),(186,186,46),(187,187,46),(188,188,46),(189,189,47),(190,190,47),(191,191,47),(192,192,47),(193,193,47),(194,194,48),(195,195,48),(196,196,48),(197,197,49),(198,198,49),(199,199,49);
/*!40000 ALTER TABLE `StudentPartOfProject` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-04-26  7:21:00
